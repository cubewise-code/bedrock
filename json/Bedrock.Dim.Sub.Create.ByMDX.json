{"Parameters": [{"Prompt": "Dimension", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "Subset", "Type": "String", "Value": "", "Name": "pSubset"}, {"Prompt": "Valid MDX Expression for Specified Dimension", "Type": "String", "Value": "", "Name": "pMDXExpr"}, {"Prompt": "Bolean: 1 = True (convert to static subset)", "Type": "Numeric", "Value": 1, "Name": "pConvertToStatic"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Sub.Create.ByMDX", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will Create a dynamic subset from an MDX expression\r\n# that evaluates to a non-empty set in the specified dimension.\r\n# If the MDX does not compile or produces an empty set the process will error.\r\n# If convert to static is true then the MDX subset will be replaced by a static subset.\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Sub.Create.ByMDX';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\ncTempSubset = cProcess | '.' | sRandomInt;\r\ncTempFile = GetProcessErrorFileDirectory | cTempSubset | '.csv';\r\n\r\nsMDXExpr = pMDXExpr;\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pDimension       : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pSubset          : ' | pSubset );\r\n  AsciiOutput( sDebugFile, '            pMDXExpr         : ' | pMDXExpr );\r\n  AsciiOutput( sDebugFile, '            pConvertToStatic : ' | NumberToString( pConvertToStatic ) );\r\n\r\nEndIf;\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate dimension\r\nIf( Trim( pDimension ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( DimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate subset\r\nIf( Trim( pSubset ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No subset specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate MDX\r\nIf( Trim( sMDXExpr ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No MDX expression specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( Scan( pDimension, sMDXExpr ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Dimension name is not in MDX expression';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n### Create Subset ###\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  # If subset is to remain dynamic then just create it\r\n  If( pConvertToStatic <> 1 );\r\n    If( SubsetExists( pDimension, pSubset ) = 1 );\r\n      SubsetDestroy( pDimension, pSubset );\r\n    EndIf;\r\n    SubsetCreateByMDX( pSubset, sMDXExpr );\r\n\r\n  # If subset if to be converted to static then create temp MDX subset for processing\r\n  Else;\r\n\r\n    #Modify MDX to exclude empty MDX error\r\n    sMDXExpr = '{{[' | pDimension | '].MEMBERS.ITEM(0)},' | sMDXExpr | '}';\r\n\r\n    # Note: it is unlikley that the temp subset would already exist as it has a random number\r\n    #       in it's name. However, the check is included in case the random number generator comes\r\n    #       up with the same number twice in seperate process executions\r\n    If( SubsetExists( pDimension, cTempSubset ) = 1 );\r\n      SubsetDestroy( pDimension, cTempSubset );\r\n    EndIf;\r\n    SubsetCreateByMDX( cTempSubset, sMDXExpr );\r\n\r\n    SubsetElementDelete( pDimension , cTempSubset , 1 );\r\n\r\n    ExecuteProcess( 'Bedrock.Dim.Sub.Clone'\r\n      , 'pDimension' , pDimension\r\n      , 'pSourceSub' , cTempSubset\r\n      , 'pTargetSub' , pSubset\r\n      , 'pDebug' , pDebug\r\n    );\r\n\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\nEndIf;\r\n\r\n### Destroy Temporary Subset ###\r\n\r\nIf( pConvertToStatic = 1 );\r\n\r\n  If( SubsetExists( pDimension, cTempSubset ) = 1 );\r\n    SubsetDestroy( pDimension, cTempSubset );\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n### Finalise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n### End Epilog ###", "VariablesUIData": []}