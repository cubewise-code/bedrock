{"Parameters": [{"Prompt": "Source Cube", "Type": "String", "Value": "", "Name": "pSourceCube"}, {"Prompt": "Target Cube to create/re-create", "Type": "String", "Value": "", "Name": "pTargetCube"}, {"Prompt": "Include cube rules? (Boolean Yes = 1)", "Type": "Numeric", "Value": 1, "Name": "pIncludeRules"}, {"Prompt": "Include cube data? (Boolean Yes = 1)", "Type": "Numeric", "Value": 0, "Name": "pIncludeData"}, {"Prompt": "Source View (blank = whole cube If pIncludeData=1)", "Type": "String", "Value": "", "Name": "pSourceView"}, {"Prompt": "Skip rule values? (1=skip)", "Type": "Numeric", "Value": 1, "Name": "pRuleValues"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for error in prolog ###\r\n\r\nIf( nErrors > 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\n### Check whether only cube structure being copied or also cube data ###\r\n\r\nIf( pIncludeData = 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\n### Write data from source cube to target cube ###\r\n\r\n# Selects the correct CellPut formula depending upon the number of dimensions in the cube\r\n# and whether the value is numeric or string ( max 24 dims catered for in this code )\r\n# value type determined by element type of last dimension in cube\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  If( nDimensionCount = 2 );\r\n    sElType = DType( sDim2, v2 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v3 ), pTargetCube, v1, v2 );\r\n    Else;\r\n      CellPutS( v3, pTargetCube, v1, v2 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 3 );\r\n    sElType = DType( sDim3, v3 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v4 ), pTargetCube, v1, v2, v3 );\r\n    Else;\r\n      CellPutS( v4, pTargetCube, v1, v2, v3 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 4 );\r\n    sElType = DType( sDim4, v4 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v5 ), pTargetCube, v1, v2, v3, v4 );\r\n    Else;\r\n      CellPutS( v5, pTargetCube, v1, v2, v3, v4 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 5 );\r\n    sElType = DType( sDim5, v5 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v6 ), pTargetCube, v1, v2, v3, v4, v5 );\r\n    Else;\r\n      CellPutS( v6, pTargetCube, v1, v2, v3, v4, v5 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 6 );\r\n    sElType = DType( sDim6, v6 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v7 ), pTargetCube, v1, v2, v3, v4, v5, v6 );\r\n    Else;\r\n      CellPutS( v7, pTargetCube, v1, v2, v3, v4, v5, v6 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 7 );\r\n    sElType = DType( sDim7, v7 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v8 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7 );\r\n    Else;\r\n      CellPutS( v8, pTargetCube, v1, v2, v3, v4, v5, v6, v7 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 8 );\r\n    sElType = DType( sDim8, v8 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v9 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8 );\r\n    Else;\r\n      CellPutS( v9, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 9 );\r\n    sElType = DType( sDim9, v9 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v10 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n    Else;\r\n      CellPutS( v10, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 10 );\r\n    sElType = DType( sDim10, v10 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v11 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n    Else;\r\n      CellPutS( v11, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 11 );\r\n    sElType = DType( sDim11, v11 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v12 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n    Else;\r\n      CellPutS( v12, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 12 );\r\n    sElType = DType( sDim12, v12 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v13 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n    Else;\r\n      CellPutS( v13, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 13 );\r\n    sElType = DType( sDim13, v13 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v14 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n    Else;\r\n      CellPutS( v14, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 14 );\r\n    sElType = DType( sDim14, v14 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v15 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n    Else;\r\n      CellPutS( v15, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 15 );\r\n    sElType = DType( sDim15, v15 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v16 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n    Else;\r\n      CellPutS( v16, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 16 );\r\n    sElType = DType( sDim16, v16 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v17 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n    Else;\r\n      CellPutS( v17, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 17 );\r\n    sElType = DType( sDim17, v17 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v18 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n    Else;\r\n      CellPutS( v18, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 18 );\r\n     sElType = DType( sDim18, v18 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v19 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n    Else;\r\n      CellPutS( v19, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 19 );\r\n     sElType = DType( sDim19, v19 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v20 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n    Else;\r\n      CellPutS( v20, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 20 );\r\n     sElType = DType( sDim20, v20 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v21 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n    Else;\r\n      CellPutS( v21, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 21 );\r\n     sElType = DType( sDim21, v21 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v22 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n    Else;\r\n      CellPutS( v22, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 22 );\r\n     sElType = DType( sDim22, v22 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v23 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n    Else;\r\n      CellPutS( v23, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 23 );\r\n     sElType = DType( sDim23, v23 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v24 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23 );\r\n    Else;\r\n      CellPutS( v24, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 24 );\r\n     sElType = DType( sDim24, v24 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v25 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23, v24 );\r\n    Else;\r\n      CellPutS( v25, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 25 );\r\n     sElType = DType( sDim25, v26 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v26 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23, v24, v25 );\r\n    Else;\r\n      CellPutS( v26, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,\r\n            v25 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 26 );\r\n     sElType = DType( sDim26, v27 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v27 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23, v24, v25, v26 );\r\n    Else;\r\n      CellPutS( v27, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,\r\n      v25, v26 );\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 27 );\r\n     sElType = DType( sDim27, v28 );\r\n    If( sElType @<> 'S' );\r\n      CellPutN( Numbr( v28 ), pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23, v24, v25, v26, v27 );\r\n    Else;\r\n      CellPutS( v28, pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,\r\n      v25, v26 );\r\n    EndIf;\r\n\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\n### End Data ###", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v1"}, {"Position": 2, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v2"}, {"Position": 3, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v3"}, {"Position": 4, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v4"}, {"Position": 5, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v5"}, {"Position": 6, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v6"}, {"Position": 7, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v7"}, {"Position": 8, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v8"}, {"Position": 9, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v9"}, {"Position": 10, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v10"}, {"Position": 11, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v11"}, {"Position": 12, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v12"}, {"Position": 13, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v13"}, {"Position": 14, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v14"}, {"Position": 15, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v15"}, {"Position": 16, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v16"}, {"Position": 17, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v17"}, {"Position": 18, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v18"}, {"Position": 19, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v19"}, {"Position": 20, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v20"}, {"Position": 21, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v21"}, {"Position": 22, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v22"}, {"Position": 23, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v23"}, {"Position": 24, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v24"}, {"Position": 25, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v25"}, {"Position": 26, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V26"}, {"Position": 27, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V27"}, {"Position": 28, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V28"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.Clone", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process replicates an existing cube.\r\n# Option to include data and rules with the creation of the cube.\r\n# If a target cube name is specIfied that already exists in the model the cube will be destroyed and recreated.\r\n# If the target cube is left blank or is the same as the source cube the cloned cube will inherit the source\r\n# cube name with \"_Clone\" appended.\r\n\r\n# Notes:\r\n# - As this TI has a view as a data source it requires the implicit variables NValue, SValue and Value_is_String\r\n# - To edit this TI without Vizier either a tmp cube with 24 dims is needed as the preview data source or set the data\r\n#   source to ASCII and manually edit the TI in notepad after saving to add back the required implicit view variables\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.Clone';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pSourceCube   : ' | pSourceCube );\r\n  AsciiOutput( sDebugFile, '            pTargetCube   : ' | pTargetCube );\r\n  AsciiOutput( sDebugFile, '            pIncludeRules : ' | NumberToString( pIncludeRules ) );\r\n  AsciiOutput( sDebugFile, '            pIncludeData  : ' | NumberToString( pIncludeData ) );\r\n  AsciiOutput( sDebugFile, '            pSourceView   : ' | pSourceView );\r\n  AsciiOutput( sDebugFile, '            pRuleValues   : ' | NumberToString( pRuleValues ) );\r\n\r\nEndIf;\r\n\r\n\r\n### Initialise ###\r\n\r\nnDataCheck = 0;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate source cube\r\nIf( pSourceCube @= '' % CubeExists( pSourceCube ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source cube specified: ' | pSourceCube;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate target cube\r\nIf( pTargetCube @= '' % pTargetCube @= pSourceCube );\r\n  pTargetCube = pSourceCube | '_Clone';\r\nEndIf;\r\n\r\n# Validate View\r\nIf( pIncludeData = 1 & pSourceView @<> '' );\r\n  If( ViewExists( pSourceCube, pSourceView ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Invalid view specified: ' | pSourceView | ' for cube: ' | pSourceCube;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    DataSourceType = 'NULL';\r\n    ItemReject( sMessage );\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\n### Determine number of dims in source cube ###\r\n\r\nnDimensionCount = 0;\r\nWhile( TabDim( pSourceCube, nDimensionCount + 1 ) @<> '' );\r\n  nDimensionCount = nDimensionCount + 1;\r\nEnd;\r\n\r\nIf( nDimensionCount > 27 );\r\n  nErrors = 1;\r\n  sMessage = 'Cube has too many dimensions: ' | pSourceCube | ' max 27 dims catered for, TI must be altered to accomodate.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n\r\n### Check to see if target cube exists ###\r\n\r\nIf( CubeExists( pTargetCube ) = 1 );\r\n  If( pDebug <= 1 );\r\n    CubeDestroy( pTargetCube );\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\n### Determine dimensions in source cube ###\r\n\r\nsDim1 = TabDim( pSourceCube, 1 );\r\nsDim2 = TabDim( pSourceCube, 2 );\r\nsDim3 = TabDim( pSourceCube, 3 );\r\nsDim4 = TabDim( pSourceCube, 4 );\r\nsDim5 = TabDim( pSourceCube, 5 );\r\nsDim6 = TabDim( pSourceCube, 6 );\r\nsDim7 = TabDim( pSourceCube, 7 );\r\nsDim8 = TabDim( pSourceCube, 8 );\r\nsDim9 = TabDim( pSourceCube, 9 );\r\nsDim10 = TabDim( pSourceCube, 10 );\r\nsDim11 = TabDim( pSourceCube, 11 );\r\nsDim12 = TabDim( pSourceCube, 12 );\r\nsDim13 = TabDim( pSourceCube, 13 );\r\nsDim14 = TabDim( pSourceCube, 14 );\r\nsDim15 = TabDim( pSourceCube, 15 );\r\nsDim16 = TabDim( pSourceCube, 16 );\r\nsDim17 = TabDim( pSourceCube, 17 );\r\nsDim18 = TabDim( pSourceCube, 18 );\r\nsDim19 = TabDim( pSourceCube, 19 );\r\nsDim20 = TabDim( pSourceCube, 20 );\r\nsDim21 = TabDim( pSourceCube, 21 );\r\nsDim22 = TabDim( pSourceCube, 22 );\r\nsDim23 = TabDim( pSourceCube, 23 );\r\nsDim24 = TabDim( pSourceCube, 24 );\r\nsDim25 = TabDim( pSourceCube, 25 );\r\nsDim26 = TabDim( pSourceCube, 26 );\r\nsDim27 = TabDim( pSourceCube, 27 );\r\n\r\n### Create target cube ###\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  If( nDimensionCount = 2 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2 );\r\n  ElseIf( nDimensionCount = 3 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3 );\r\n  ElseIf( nDimensionCount = 4 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4 );\r\n  ElseIf( nDimensionCount = 5 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5 );\r\n  ElseIf( nDimensionCount = 6 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6 );\r\n  ElseIf( nDimensionCount = 7 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7 );\r\n  ElseIf( nDimensionCount = 8 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8 );\r\n  ElseIf( nDimensionCount = 9 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9 );\r\n  ElseIf( nDimensionCount = 10 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10 );\r\n  ElseIf( nDimensionCount = 11 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11 );\r\n  ElseIf( nDimensionCount = 12 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12 );\r\n  ElseIf( nDimensionCount = 13 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13 );\r\n  ElseIf( nDimensionCount = 14 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14 );\r\n  ElseIf( nDimensionCount = 15 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15 );\r\n  ElseIf( nDimensionCount = 16 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16 );\r\n  ElseIf( nDimensionCount = 17 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17 );\r\n  ElseIf( nDimensionCount = 18 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18 );\r\n  ElseIf( nDimensionCount = 19 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19 );\r\n  ElseIf( nDimensionCount = 20 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20 );\r\n  ElseIf( nDimensionCount = 21 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20, sDim21 );\r\n  ElseIf( nDimensionCount = 22 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22 );\r\n  ElseIf( nDimensionCount = 23 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23 );\r\n  ElseIf( nDimensionCount = 24 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24 );\r\n  ElseIf( nDimensionCount = 25 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24, sDim25 );\r\n  ElseIf( nDimensionCount = 26 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24, sDim25, sDim26 );\r\n  ElseIf( nDimensionCount = 27 );\r\n    CubeCreate( pTargetCube, sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16,\r\n                sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24, sDim25, sDim26, sDim27 );\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n\r\n### Assign Datasource ###\r\n\r\nIf( pIncludeData = 1 );\r\n\r\n  DataSourceType = 'VIEW';\r\n  DatasourceNameForServer = pSourceCube;\r\n  DatasourceNameForClient = pSourceCube;\r\n  NValue = 0;\r\n  SValue = '0';\r\n  Value_is_String = 0;\r\n\r\n  sSourceView = pSourceView;\r\n  If( sSourceView @= '' );\r\n    sSourceView = '}' | cProcess;\r\n    If( ViewExists( pSourceCube, sSourceView ) = 0 );\r\n      ViewCreate( pSourceCube, sSourceView );\r\n    EndIf;\r\n  EndIf;\r\n\r\n  ViewExtractSkipCalcsSet( pSourceCube, sSourceView, 1 );\r\n  ViewExtractSkipRuleValuesSet( pSourceCube, sSourceView, pRuleValues );\r\n  ViewExtractSkipZeroesSet( pSourceCube, sSourceView, 1 );\r\n  DatasourceCubeView = sSourceView;\r\nElse;\r\n  nDataCheck = nDataCheck + 1;\r\n  DataSourceType = 'NULL';\r\nEndIf;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"view": "Temp", "dataSourceNameForServer": "Bedrock Test", "dataSourceNameForClient": "Bedrock Test", "Type": "TM1CubeView"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\nEndIf;\r\n\r\n\r\n### Attach rules to cloned cube ###\r\n\r\nIf( nErrors = 0 & pIncludeRules = 1 );\r\n  sRuleFile = pSourceCube | '.rux';\r\n  If( FileExists( sRuleFile ) = 1 );\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, 'Rules file found' );\r\n    EndIf;\r\n    If( pDebug <= 1 );\r\n      RuleLoadFromFile( pTargetCube, sRuleFile );\r\n    EndIf;\r\n  Else;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, 'Cannot attach rule.  No rules exist in source cube: ' | pSourceCube );\r\n    EndIf;\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\n### Finalise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f"]}