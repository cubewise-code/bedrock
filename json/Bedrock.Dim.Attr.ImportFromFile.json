{"Parameters": [{"Prompt": "Target Dimension", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "File Directory", "Type": "String", "Value": "", "Name": "pSourceDir"}, {"Prompt": "File Name", "Type": "String", "Value": "", "Name": "pSourceFile"}, {"Prompt": "Number of Title Rows to Skip", "Type": "Numeric", "Value": 1, "Name": "pTitleRows"}, {"Prompt": "Delimiter Character (default=Comma)", "Type": "String", "Value": ",", "Name": "pDelimiter"}, {"Prompt": "Quote Character (default=Double Quote)", "Type": "String", "Value": "\"", "Name": "pQuote"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "vAttribute"}, {"Position": 2, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "vAttrType"}, {"Position": 3, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V3"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Attr.ImportFromFile", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will create Attributes to the dimension from a file.\r\n# the file format is as per the dimension export file applied to an }ElementsAttributes dimension\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Attr.ImportFromFile';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\nnMetaDataCount = 0;\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pSourceDir  : ' | pSourceDir );\r\n  AsciiOutput( sDebugFile, '            pSourceFile : ' | pSourceFile );\r\n  AsciiOutput( sDebugFile, '            pDimension  : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pTitleRows  : ' | NumberToString( pTitleRows ) );\r\n  AsciiOutput( sDebugFile, '            pDelimiter  : ' | pDelimiter );\r\n  AsciiOutput( sDebugFile, '            pQuote      : ' | pQuote );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate source dir\r\nIf( FileExists( pSourceDir ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source directory specified: folder does not exist.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( SubSt( pSourceDir, Long( pSourceDir ), 1 ) @<> '\\' );\r\n  pSourceDir = pSourceDir | '\\';\r\nEndIf;\r\n\r\n# Validate source file\r\nsFile = pSourceDir | pSourceFile;\r\nIf( Long( Trim( pSourceFile ) ) = 0 % FileExists( sFile ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source file specified: file does not exist in directory.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate dimension\r\nIf( DimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension specified: dimension does not exist.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate delimiter\r\nIf( Trim( pDelimiter ) @= '' );\r\n  pDelimiter = ',';\r\nEndIf;\r\nIf( Long( pDelimiter ) > 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid delimiter specified: ' | pDelimiter | ' record delimiter must be single character.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate qote character\r\nIf( Trim( pQuote ) @= '' );\r\n  pQuote = '\"';\r\nEndIf;\r\nIf( Long( pQuote ) > 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid string qualifier: ' | pQuote | ' quote character must be single character.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n\r\n### Assign Datasource ###\r\n\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceNameForServer = sFile;\r\nDatasourceNameForClient = sFile;\r\nDatasourceASCIIHeaderRecords = pTitleRows;\r\nDatasourceASCIIDelimiter = pDelimiter;\r\nDatasourceASCIIQuoteCharacter = pQuote;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for error in prolog ###\r\nIf( nErrors > 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n## Metatdata Count\r\nnMetaDataCount = nMetaDataCount + 1;\r\n\r\n### Write data from source file to target dimension ###\r\nsAttrType = SubSt( vAttrType, 1, 1 );\r\n\r\n### Validate Record ###\r\nIF(\r\n  sAttrType @= 'A' %\r\n  sAttrType @= 'N' %\r\n  sAttrType @= 'S' );\r\n  ## Continute\r\nELSE;\r\n  sMessage = 'Invalid attribute type.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, vAttribute, vAttrType, 'Record ' | NumberToString(nMetaDataCount), sMessage );\r\n    ITEMSKIP;\r\n  ELSE;\r\n    ITEMSKIP;\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\n\r\nIf( pDebug <= 1 );\r\n  AttrInsert( pDimension, '', vAttribute, sAttrType );\r\nEndIf;\r\n\r\n\r\n### End Metadata ###", "DataSource": {"asciiQuoteCharacter": "\"", "asciiDelimiterChar": ",", "dataSourceNameForServer": "C:\\TM1\\Bedrock\\Data\\Bedrock.Z.Attr.Placeholder.csv", "dataSourceNameForClient": "C:\\TM1\\Bedrock\\Data\\Bedrock.Z.Attr.Placeholder.csv", "asciiHeaderRecords": 1, "asciiThousandSeparator": ",", "asciiDelimiterType": "Character", "Type": "ASCII", "asciiDecimalSeparator": "."}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f"]}