{"Parameters": [{"Prompt": "List of Groups Seperated by Delimiter", "Type": "String", "Value": "", "Name": "pGroups"}, {"Prompt": "Type of Object to Assign Security To (Application/Cube/Dimension/Process/Chore)", "Type": "String", "Value": "", "Name": "pObjectType"}, {"Prompt": "List of Objects Seperated by Delimiter", "Type": "String", "Value": "", "Name": "pObjects"}, {"Prompt": "Security Level (Read/Write/Admin/None)", "Type": "String", "Value": "", "Name": "pSecurityLevel"}, {"Prompt": "Refresh Security? (Default = No)", "Type": "String", "Value": "No", "Name": "pSecurityRefresh"}, {"Prompt": "Delimiter", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Security.Object.Assign", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will assign security to specified object\r\n\r\n# Note:\r\n# - Before using this process, you must first initialise object security.\r\n# - For Applications, in Server Explorer go to Applications -> Security Assignments and assign\r\n#   an access security for an Application. For other object types follow a similar process but for that object type\r\n# - Then from the Server Explorer go to your ServerName -> Security -> Refresh Security\r\n# - Multiple groups can be specified seperated by delimiter\r\n# - Multiple objects can be specified seperated by delimiter\r\n# - If groups and/or objects that don't exist are specified, then they will be skipped but\r\n#   valid groups and ojects will still be processed\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Security.Object.Assign';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\ncSecurityCube = '}' | pObjectType | 'Security';\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pGroups          : ' | pGroups );\r\n  AsciiOutput( sDebugFile, '            pObjectType      : ' | pObjectType );\r\n  AsciiOutput( sDebugFile, '            pObjects         : ' | pObjects );\r\n  AsciiOutput( sDebugFile, '            pSecurityLevel   : ' | pSecurityLevel );\r\n  AsciiOutput( sDebugFile, '            pSecurityRefresh : ' | pSecurityRefresh );\r\n  AsciiOutput( sDebugFile, '            pDelimiter       : ' | pDelimiter );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# If no groups have been specified then terminate process\r\nIf( Trim( pGroups ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No groups specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate Object Type\r\nIf( pObjectType @<> 'Application' & pObjectType @<> 'Cube' & pObjectType @<> 'Dimension' & pObjectType @<> 'Process' & pObjectType @<> 'Chore' );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid object type specified: ' | pObjectType | '. Valid object types are: Application, Cube, Dimension, Process and Chore';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# If no objects have been specified then terminate process\r\nIf( Trim( pObjects ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No objects specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate that object type has object security enabled\r\nIf( CubeExists( cSecurityCube ) = 0 );\r\n  sObjectTypePlural = pObjectType;\r\n  If( pObjectType @= 'Process');\r\n    sObjectTypePlural = sObjectTypePlural | 'es';\r\n  Else;\r\n    sObjectTypePlural = sObjectTypePlural | 's';\r\n  EndIf;\r\n  If( pDebug >= 1 );\r\n    nErrors = 1;\r\n    sMessage = 'You must first initialise ' | pObjectType | ' Security. In the Server Explorer go to ' |\r\n               sObjectTypePlural | ' -> Security Assignments, and assign an access security to a ' |\r\n               pObjectType | '. Then from the Server Explorer go to your ServerName -> Security -> Refresh Security';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Set Object Type Dimension\r\nsObjectTypeDimension = '}' | pObjectType;\r\nIf( pObjectType @= 'Application' );\r\n  sObjectTypeDimension = sObjectTypeDimension | 'Entries';\r\nElseIf( pObjectType @= 'Process' );\r\n  sObjectTypeDimension = sObjectTypeDimension | 'es';\r\nElse;\r\n  sObjectTypeDimension = sObjectTypeDimension | 's';\r\nEndIf;\r\n\r\n# Validate Security Level\r\n# Allowable Security Levels by Object Type (excluding RESERVE and LOCK):\r\n#   Cube        : NONE, READ, ADMIN, WRITE\r\n#   Dimension   : NONE, READ, ADMIN, WRITE\r\n#   Application : NONE, READ, ADMIN\r\n#   Process     : NONE, READ\r\n#   Chore       : NONE, READ\r\npSecurityLevel = Upper( pSecurityLevel );\r\nIf(\r\n  ( pSecurityLevel @= 'NONE' ) %\r\n  ( pSecurityLevel @= 'READ' ) %\r\n  ( pSecurityLevel @= 'ADMIN' & ( pObjectType @= 'Cube' % pObjectType @= 'Dimension' % pObjectType @= 'Application' ) ) %\r\n  ( pSecurityLevel @= 'WRITE' & ( pObjectType @= 'Cube' % pObjectType @= 'Dimension' ) ) );\r\n  # Valid Security Levels\r\nElse;\r\n  nErrors = 1;\r\n  sMessage = 'Invalid security level parameter: ' | pSecurityLevel | ' for object type: ' | pObjectType;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# If pSecurityRefresh is blank then default to yes\r\nIf( Trim( pSecurityRefresh ) @= '' );\r\n  pSecurityRefresh = 'Yes';\r\nEndIf;\r\n\r\n# If pSecurityRefresh has not been specified correctly then terminate process\r\nIf( Upper( pSecurityRefresh ) @<> 'YES' & Upper( pSecurityRefresh ) @<> 'NO' );\r\n  nErrors = 1;\r\n  sMessage = 'Incorrect value for pSecurityRefresh: ' | pSecurityRefresh | '. Valid values are Yes or No';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelimiter @= '' );\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n\r\n### Assign Application Security ###\r\n\r\n# Loop through list of groups\r\nsGroups = pGroups;\r\nnGroupDelimIndex = 1;\r\n\r\nWhile( nGroupDelimIndex <> 0 );\r\n  nGroupDelimIndex = Scan( pDelimiter, sGroups );\r\n  If( nGroupDelimIndex = 0 );\r\n    sGroup = sGroups;\r\n  Else;\r\n    sGroup = Trim( SubSt( sGroups, 1, nGroupDelimIndex - 1 ) );\r\n    sGroups = Trim( Subst( sGroups, nGroupDelimIndex + Long(pDelimiter), Long( sGroups ) ) );\r\n  EndIf;\r\n  # Don't attempt to process a blank group or ADMIN\r\n  If( sGroup @<> '' & sGroup @<> 'ADMIN' );\r\n    # Check that Group exists\r\n    If( DimIx( '}Groups', sGroup ) <> 0 );\r\n\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Group: ' | sGroup | ' OK' );\r\n      EndIf;\r\n\r\n      # Loop through list of objects\r\n      sObjects = pObjects;\r\n      nObjectDelimIndex = 1;\r\n\r\n      While( nObjectDelimIndex <> 0 );\r\n        nObjectDelimIndex = Scan( pDelimiter, sObjects );\r\n        If( nObjectDelimIndex = 0 );\r\n          sObject = sObjects;\r\n        Else;\r\n          sObject = Trim( SubSt( sObjects, 1, nObjectDelimIndex - 1 ) );\r\n          sObjects = Trim( Subst( sObjects, nObjectDelimIndex + Long(pDelimiter), Long( sObjects ) ) );\r\n        EndIf;\r\n        # Don't attempt to process a blank object\r\n        If( sObject @<> '' );\r\n          # Check that object exists\r\n          If( DimIx( sObjectTypeDimension, sObject ) <> 0 );\r\n            If( pDebug >= 1 );\r\n              AsciiOutput( sDebugFile, 'Object: ' | sObject | ' OK' );\r\n            EndIf;\r\n\r\n            # Assign Security\r\n            If( CellIsUpdateable( cSecurityCube, sObject, sGroup ) = 1 );\r\n              If( pDebug >= 1 );\r\n                AsciiOutput( sDebugFile, 'Access to ' | pObjectType | ': ' | sObject | ' for Group: ' | sGroup | ' OK' );\r\n              EndIf;\r\n              If( pDebug <= 1);\r\n                CellPutS( pSecurityLevel, cSecurityCube, sObject, sGroup );\r\n              EndIf;\r\n            Else;\r\n              If( pDebug >= 1 );\r\n                AsciiOutput( sDebugFile, 'Cannot set security, rule applies to cell: ' | cSecurityCube | ', ' | sObject | ', ' | sGroup );\r\n              EndIf;\r\n            EndIf;\r\n          Else;\r\n            If( pDebug >= 1 );\r\n              AsciiOutput( sDebugFile, pObjectType | ': ' | sObject | ' does not exist' );\r\n            EndIf;\r\n          EndIf;\r\n        EndIf;\r\n      End;\r\n    Else;\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Group: ' | sGroup | ' does not exist' );\r\n      EndIf;\r\n    EndIf;\r\n  EndIf;\r\nEnd;\r\n\r\n\r\n### Refresh Security ###\r\n\r\nIf( Upper( pSecurityRefresh ) @= 'YES' );\r\n  SecurityRefresh;\r\nEndIf;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}