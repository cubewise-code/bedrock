{"Parameters": [{"Prompt": "Client Names Seperated by Delimiter", "Type": "String", "Value": "", "Name": "pClients"}, {"Prompt": "Group Names Seperated by Delimiter", "Type": "String", "Value": "", "Name": "pGroups"}, {"Prompt": "Delimiter", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "Add or Remove", "Type": "String", "Value": "Add", "Name": "pAddOrRemove"}, {"Prompt": "Refresh Security?", "Type": "String", "Value": "Yes", "Name": "pSecurityRefresh"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Security.Client.Group.Assign", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will assign Client and Group Security\r\n\r\n# Notes:\r\n# - This process can either add or remove clients to groups based on pAddOrRemove\r\n# - This process can work on a single client or multiple clients seperated by a delimiter\r\n# - This process can work on a single group or multiple groups seperated by a delimiter\r\n# - Therefore, it can be used to:\r\n#   - Add/remove a single client to/from a single group\r\n#   - Add/remove many clients to/from a single group\r\n#   - Add/remove a single client to/from many groups\r\n#   - Add/remove many clients to/from many groups\r\n# - The caller can choose whether or not to refresh security at the end. Default is yes\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Security.Client.Group.Assign';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pClients         : ' | pClients );\r\n  AsciiOutput( sDebugFile, '            pGroups          : ' | pGroups );\r\n  AsciiOutput( sDebugFile, '            pAddOrRemove     : ' | pAddOrRemove );\r\n  AsciiOutput( sDebugFile, '            pSecurityRefresh : ' | pSecurityRefresh );\r\n  AsciiOutput( sDebugFile, '            pDelimiter       : ' | pDelimiter );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# If no clients have been specified then terminate process\r\nIf( Trim( pClients ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No clients specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# If no groups have been specified then terminate process\r\nIf( Trim( pGroups ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No groups specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# If pSecurityRefresh is blank then default to yes\r\nIf( Trim( pSecurityRefresh ) @= '' );\r\n  pSecurityRefresh = 'Yes';\r\nEndIf;\r\n\r\n# If pAddOrDelete has not been specified correctly then terminate process\r\nIf( Upper( pAddOrRemove ) @<> 'ADD' & Upper( pAddOrRemove ) @<> 'REMOVE' );\r\n  nErrors = 1;\r\n  sMessage = 'Incorrect value for pAddOrRemove: ' | pAddOrRemove | '. Valid values are Add or Remove';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# If pSecurityRefresh has not been specified correctly then terminate process\r\nIf( Upper( pSecurityRefresh ) @<> 'YES' & Upper( pSecurityRefresh ) @<> 'NO' );\r\n  nErrors = 1;\r\n  sMessage = 'Incorrect value for pSecurityRefresh: ' | pSecurityRefresh | '. Valid values are Yes or No';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelimiter @= '' );\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n\r\n### Add/remove clients to/from groups ###\r\n\r\n# Loop through list of clients\r\nsClients = pClients;\r\nnClientDelimIndex = 1;\r\n\r\nWhile( nClientDelimIndex <> 0 );\r\n  nClientDelimIndex = Scan( pDelimiter, sClients );\r\n  If( nClientDelimIndex = 0 );\r\n    sClient = sClients;\r\n  Else;\r\n    sClient = Trim( SubSt( sClients, 1, nClientDelimIndex - 1 ) );\r\n    sClients = Trim( Subst( sClients, nClientDelimIndex + Long(pDelimiter), Long( sClients ) ) );\r\n  EndIf;\r\n  # Don't attempt to process a blank client\r\n  If( sClient @<> '' );\r\n    # Check that client exists\r\n    If( DimIx( '}Clients', sClient ) <> 0 );\r\n\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Client: ' | sClient | ' OK' );\r\n      EndIf;\r\n\r\n      # Loop through list of Groups\r\n      sGroups = pGroups;\r\n      nGroupDelimIndex = 1;\r\n\r\n      While( nGroupDelimIndex <> 0 );\r\n        nGroupDelimIndex = Scan( pDelimiter, sGroups );\r\n        If( nGroupDelimIndex = 0 );\r\n          sGroup = sGroups;\r\n        Else;\r\n          sGroup = Trim( SubSt( sGroups, 1, nGroupDelimIndex - 1 ) );\r\n          sGroups = Trim( Subst( sGroups, nGroupDelimIndex + Long(pDelimiter), Long( sGroups ) ) );\r\n        EndIf;\r\n        # Don't attempt to process a blank Group\r\n        If( sGroup @<> '' );\r\n          # Check that group exists\r\n          If( DimIx( '}Groups', sGroup ) <> 0 );\r\n\r\n            If( pDebug >= 1 );\r\n              AsciiOutput( sDebugFile, 'Group: ' | sGroup | ' OK' );\r\n            EndIf;\r\n\r\n            # Add/Remove Client\r\n            If( Upper( pAddOrRemove ) @= 'ADD' );\r\n              AssignClientToGroup( sClient, sGroup );\r\n            ElseIf( Upper( pAddOrRemove ) @= 'REMOVE' );\r\n              RemoveClientFromGroup( sClient, sGroup );\r\n            EndIf;\r\n\r\n          Else;\r\n            If( pDebug >= 1 );\r\n              AsciiOutput( sDebugFile, 'Group: ' | sGroup | ' does not exist' );\r\n            EndIf;\r\n          EndIf;\r\n        EndIf;\r\n      End;\r\n    Else;\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Client: ' | sClient | ' does not exist' );\r\n      EndIf;\r\n    EndIf;\r\n  EndIf;\r\nEnd;\r\n\r\n\r\n### Refresh Security ###\r\n\r\nIf( Upper( pSecurityRefresh ) @= 'YES' );\r\n  SecurityRefresh;\r\nEndIf;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}