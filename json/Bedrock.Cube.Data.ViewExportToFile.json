{"Parameters": [{"Prompt": "Source Cube", "Type": "String", "Value": "", "Name": "pCube"}, {"Prompt": "Export File Path (Defaults to Logging Directory if Left Blank)", "Type": "String", "Value": "", "Name": "pExportPath"}, {"Prompt": "If Blank Will Default to cube.view.export.csv", "Type": "String", "Value": "", "Name": "pExportFile"}, {"Prompt": "Source View (Blank = Whole Cube)", "Type": "String", "Value": "", "Name": "pView"}, {"Prompt": "Skip Rule Values? (Boolean 1=skip)", "Type": "Numeric", "Value": 1, "Name": "pSkipRuleValues"}, {"Prompt": "Skip Consol Values? (Boolean 1=skip)", "Type": "Numeric", "Value": 1, "Name": "pSkipCalcValues"}, {"Prompt": "Skip Zero Values? (Boolean 1=skip)", "Type": "Numeric", "Value": 1, "Name": "pSkipNullValues"}, {"Prompt": "Include Title Record in Export File? (Boolean 1=Yes)", "Type": "Numeric", "Value": 1, "Name": "pTitleRecord"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for error in prolog ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  ### Check whether to write title records ###\r\n\r\n  nRecordCount = nRecordCount + 1;\r\n\r\n  If( nRecordCount = 1 & pTitleRecord = 1 );\r\n\r\n    If( pSkipCalcValues = 1 );\r\n      sExportCond = ' SkipCalcs=True ';\r\n    Else;\r\n      sExportCond = ' SkipCalcs=False ';\r\n    EndIf;\r\n\r\n    If( pSkipRuleValues = 1 );\r\n      sExportCond = sExportCond | 'SkipRules=True ';\r\n    Else;\r\n      sExportCond = sExportCond | 'SkipRules=False ';\r\n    EndIf;\r\n\r\n    If( pSkipNullValues = 1 );\r\n      sExportCond = sExportCond | 'SkipNull=True';\r\n    Else;\r\n      sExportCond = sExportCond | 'SkipNull=False';\r\n    EndIf;\r\n\r\n    AsciiOutput( sFile, 'Export from cube: ' | pCube | ' view: ' | pView | '. On ' | DATE( NOW, 1 ) | ' at ' | TIME | sExportCond );\r\n\r\n    If( nNumDims = 2 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, 'Value' );\r\n    ElseIf( nNumDims = 3 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, 'Value' );\r\n    ElseIf( nNumDims = 4 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, 'Value' );\r\n    ElseIf( nNumDims = 5 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, 'Value' );\r\n    ElseIf( nNumDims = 6 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, 'Value' );\r\n    ElseIf( nNumDims = 7 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, 'Value' );\r\n    ElseIf( nNumDims = 8 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, 'Value' );\r\n    ElseIf( nNumDims = 9 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, 'Value' );\r\n    ElseIf( nNumDims = 10 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, 'Value' );\r\n    ElseIf( nNumDims = 11 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, 'Value' );\r\n    ElseIf( nNumDims = 12 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, 'Value' );\r\n    ElseIf( nNumDims = 13 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, 'Value' );\r\n    ElseIf( nNumDims = 14 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, 'Value' );\r\n    ElseIf( nNumDims = 15 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, 'Value' );\r\n    ElseIf( nNumDims = 16 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, 'Value' );\r\n    ElseIf( nNumDims = 17 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, 'Value' );\r\n    ElseIf( nNumDims = 18 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, sDim18, 'Value' );\r\n    ElseIf( nNumDims = 19 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, 'Value' );\r\n    ElseIf( nNumDims = 20 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, 'Value' );\r\n    ElseIf( nNumDims = 21 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, 'Value' );\r\n    ElseIf( nNumDims = 22 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, 'Value' );\r\n    ElseIf( nNumDims = 23 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, 'Value' );\r\n    ElseIf( nNumDims = 24 );\r\n      AsciiOutput( sFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13,\r\n                   sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, sDim24, 'Value' );\r\n    EndIf;\r\n  EndIf;\r\n\r\n\r\n  ### Write data from source cube to export file ###\r\n\r\n  # Selects the correct AsciiOutput formula depending upon the number of dimensions in the cube\r\n\r\n  If( nNumDims = 2 );\r\n    AsciiOutput( sFile, pCube, v1, v2, SValue );\r\n  ElseIf( nNumDims = 3 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, SValue );\r\n  ElseIf( nNumDims = 4 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, SValue );\r\n  ElseIf( nNumDims = 5 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, SValue );\r\n  ElseIf( nNumDims = 6 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, SValue );\r\n  ElseIf( nNumDims = 7 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, SValue );\r\n  ElseIf( nNumDims = 8 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, SValue );\r\n  ElseIf( nNumDims = 9 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, SValue );\r\n  ElseIf( nNumDims = 10 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, SValue );\r\n  ElseIf( nNumDims = 11 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, SValue );\r\n  ElseIf( nNumDims = 12 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, SValue );\r\n  ElseIf( nNumDims = 13 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, SValue );\r\n  ElseIf( nNumDims = 14 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, SValue );\r\n  ElseIf( nNumDims = 15 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, SValue );\r\n  ElseIf( nNumDims = 16 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, SValue );\r\n  ElseIf( nNumDims = 17 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, SValue );\r\n  ElseIf( nNumDims = 18 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, SValue );\r\n  ElseIf( nNumDims = 19 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, SValue );\r\n  ElseIf( nNumDims = 20 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, SValue );\r\n  ElseIf( nNumDims = 21 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,\r\n                 SValue );\r\n  ElseIf( nNumDims = 22 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,\r\n                 v22, SValue );\r\n  ElseIf( nNumDims = 23 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,\r\n                 v22, v23, SValue );\r\n  ElseIf( nNumDims = 24 );\r\n    AsciiOutput( sFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,\r\n                 v22, v23, v24, SValue );\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n\r\n### End Data ###", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v1"}, {"Position": 2, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v2"}, {"Position": 3, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v3"}, {"Position": 4, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v4"}, {"Position": 5, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v5"}, {"Position": 6, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v6"}, {"Position": 7, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v7"}, {"Position": 8, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v8"}, {"Position": 9, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v9"}, {"Position": 10, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v10"}, {"Position": 11, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v11"}, {"Position": 12, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v12"}, {"Position": 13, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v13"}, {"Position": 14, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v14"}, {"Position": 15, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v15"}, {"Position": 16, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v16"}, {"Position": 17, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v17"}, {"Position": 18, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v18"}, {"Position": 19, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v19"}, {"Position": 20, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v20"}, {"Position": 21, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v21"}, {"Position": 22, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v22"}, {"Position": 23, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v23"}, {"Position": 24, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v24"}, {"Position": 25, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v25"}, {"Position": 26, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v26"}, {"Position": 27, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v27"}, {"Position": 28, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v28"}, {"Position": 29, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v29"}, {"Position": 30, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v30"}, {"Position": 31, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "Value"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.Data.ViewExportToFile", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This cube exports data from the specified cube to an ASCII file.\r\n\r\n# Note:\r\n# - As this TI has a view as a data source it requires the implicit variables NValue, SValue and Value_is_String\r\n# - To edit this TI either without VIZIER a temp cube with 24 dims is needed as the preview data source or set the data\r\n#   source to ASCII and manually edit the TI in notepad after saving to add back the required implicit view variables\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.Data.ViewExportToFile';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pCube           : ' | pCube );\r\n  AsciiOutput( sDebugFile, '            pExportPath     : ' | pExportPath );\r\n  AsciiOutput( sDebugFile, '            pExportFile     : ' | pExportFile );\r\n  AsciiOutput( sDebugFile, '            pView           : ' | pView );\r\n  AsciiOutput( sDebugFile, '            pSkipRuleValues : ' | NumberToString( pSkipRuleValues ) );\r\n  AsciiOutput( sDebugFile, '            pSkipCalcValues : ' | NumberToString( pSkipCalcValues ) );\r\n  AsciiOutput( sDebugFile, '            pSkipNullValues : ' | NumberToString( pSkipNullValues ) );\r\n  AsciiOutput( sDebugFile, '            pTitleRecord    : ' | NumberToString( pTitleRecord ) );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\nnRecordCount = 0;\r\n\r\n# Validate cube\r\nIf( CubeExists( pCube ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source cube specified: ' | pCube;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate view\r\nIf( pView @<> ''  & ViewExists( pCube, pView ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid view specified: ' | pCube | ', ' | pView | '. View does not exist.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate export path\r\nIf( Trim( pExportPath ) @= '' );\r\n  pExportPath = SubSt( GetProcessErrorFileDirectory, 1, Long( GetProcessErrorFileDirectory )- 1 );\r\nElseIf( FileExists( pExportPath ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid export path specified. Folder does not exist.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate export file\r\nIf( pExportFile @= '' );\r\n  If( pView @= '' );\r\n    sView = 'All';\r\n  Else;\r\n    sView = pView;\r\n  EndIf;\r\n  pExportFile = pCube |'.'| sView | '.Export.csv';\r\nElse;\r\n  If( Scan( '.', pExportFile ) = 0 );\r\n    # No file extension specified\r\n    pExportFile = pExportFile | '.csv';\r\n  EndIf;\r\nEndIf;\r\n\r\nIf( SubSt( pExportPath, Long( pExportPath ), 1 ) @<> '\\' );\r\n  pExportPath = pExportPath | '\\';\r\nEndIf;\r\nsFile = pExportPath | pExportFile;\r\n\r\n\r\n### Determine number of dims in source cube ###\r\n\r\nnNumDims = 0;\r\nWhile( TabDim( pCube, nNumDims + 1 ) @<> '' );\r\n  nNumDims = nNumDims + 1;\r\nEnd;\r\n\r\nIf( nNumDims > 24 );\r\n  nErrors = 1;\r\n  sMessage = 'Cube has too many dimensions: ' | pCube | ' max 24 dims catered for, TI must be altered to accomodate.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n\r\n### Determine dimensions in source cube (used only in export title row) ###\r\n\r\nsDim1 = TabDim( pCube, 1 );\r\nsDim2 = TabDim( pCube, 2 );\r\nsDim3 = TabDim( pCube, 3 );\r\nsDim4 = TabDim( pCube, 4 );\r\nsDim5 = TabDim( pCube, 5 );\r\nsDim6 = TabDim( pCube, 6 );\r\nsDim7 = TabDim( pCube, 7 );\r\nsDim8 = TabDim( pCube, 8 );\r\nsDim9 = TabDim( pCube, 9 );\r\nsDim10 = TabDim( pCube, 10 );\r\nsDim11 = TabDim( pCube, 11 );\r\nsDim12 = TabDim( pCube, 12 );\r\nsDim13 = TabDim( pCube, 13 );\r\nsDim14 = TabDim( pCube, 14 );\r\nsDim15 = TabDim( pCube, 15 );\r\nsDim16 = TabDim( pCube, 16 );\r\nsDim17 = TabDim( pCube, 17 );\r\nsDim18 = TabDim( pCube, 18 );\r\nsDim19 = TabDim( pCube, 19 );\r\nsDim20 = TabDim( pCube, 20 );\r\nsDim21 = TabDim( pCube, 21 );\r\nsDim22 = TabDim( pCube, 22 );\r\nsDim23 = TabDim( pCube, 23 );\r\nsDim24 = TabDim( pCube, 24 );\r\n\r\n\r\n### Assign Datasource ###\r\n\r\nNValue = 0;\r\nSValue = '0';\r\nValue_is_String = 0;\r\n\r\nIf( pView @= '' );\r\n  # Create view\r\n  pView = '}' | cProcess;\r\n  If( ViewExists( pCube, pView ) = 0 );\r\n    ViewCreate( pCube, pView );\r\n  EndIf;\r\nEndIf;\r\n\r\nDataSourceType = 'VIEW';\r\nDatasourceNameForServer = pCube;\r\nDatasourceNameForClient = pCube;\r\nDatasourceCubeView = pView;\r\n\r\nViewExtractSkipCalcsSet( pCube, pView, pSkipCalcValues );\r\nViewExtractSkipRuleValuesSet( pCube, pView, pSkipRuleValues );\r\nViewExtractSkipZeroesSet( pCube, pView, pSkipNullValues );\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n", "DataSource": {"view": "placeholderView", "dataSourceNameForServer": "placeholder", "dataSourceNameForClient": "placeholder", "Type": "TM1CubeView"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f"]}