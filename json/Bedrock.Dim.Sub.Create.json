{"Parameters": [{"Prompt": "Dimension", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "Subset", "Type": "String", "Value": "", "Name": "pSubset"}, {"Prompt": "Consolidated Element (Blank Equals All)", "Type": "String", "Value": "", "Name": "pConsol"}, {"Prompt": "Attribute (Blank Equals All)", "Type": "String", "Value": "", "Name": "pAttribute"}, {"Prompt": "Attribute Value", "Type": "String", "Value": "", "Name": "pAttributeValue"}, {"Prompt": "From Element Level", "Type": "Numeric", "Value": 0, "Name": "pLevelFrom"}, {"Prompt": "To Element Level", "Type": "Numeric", "Value": 20, "Name": "pLevelTo"}, {"Prompt": "Elements to Exclude From Subset (Seperated by Delimiter)", "Type": "String", "Value": "", "Name": "pExclusions"}, {"Prompt": "Delimiter", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "Add to Subset if it Already Exists (0=No 1=Yes)", "Type": "Numeric", "Value": 0, "Name": "pAddToSubset"}, {"Prompt": "Set Alias for Subset", "Type": "String", "Value": "", "Name": "pAlias"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "vElement"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Sub.Create", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n### Start Prolog ###\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will create a static subset\r\n\r\n# Note:\r\n# - This process uses a number of parameters to determine what to include in the subset:\r\n#   - pConsol      : If specified, only elements that are descendants of the consol will be included in the subset\r\n#                    If blank, then this filter will be ignored\r\n#   - pAttribute   : If specified, only elements that have a value equivalent to pAttributeValue will be included\r\n#                    in the subset. If blank, this filter will be ignored\r\n#   - pLevelFrom   : Only elements with a level greater than or equal to pLevelFrom will be included in the subset\r\n#   - pLevelTo     : Only elements with a level less than or equal to pLevelFrom will be included in the subset\r\n#   - pExclusions  : If pExclusions is specified then the elements (seperated by a delimiter) will be excluded\r\n#                    from the subset\r\n#   - pAddToSubset : If the specified subset already exists then this parameter will control whether elements will\r\n#                    be added to the existing subset (value 1) or a new subset will be created (value 0)\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Sub.Create';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\ncAttributeDim = '}ElementAttributes_' | pDimension;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pDimension      : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pSubset         : ' | pSubset );\r\n  AsciiOutput( sDebugFile, '            pConsol         : ' | pConsol );\r\n  AsciiOutput( sDebugFile, '            pAttribute      : ' | pAttribute );\r\n  AsciiOutput( sDebugFile, '            pAttributeValue : ' | pAttributeValue );\r\n  AsciiOutput( sDebugFile, '            pLevelFrom      : ' | NumberToString( pLevelFrom ) );\r\n  AsciiOutput( sDebugFile, '            pLevelTo        : ' | NumberToString( pLevelTo ) );\r\n  AsciiOutput( sDebugFile, '            pExclusions     : ' | pExclusions );\r\n  AsciiOutput( sDebugFile, '            pDelimiter      : ' | pDelimiter );\r\n  AsciiOutput( sDebugFile, '            pAddToSubset    : ' | NumberToString( pAddToSubset ) );\r\n  AsciiOutput( sDebugFile, '            pAlias      : ' | pAlias );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n## Validate dimension\r\nIF(\r\nTrim( pDimension ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\nIF(\r\nDimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## Validate subset\r\nIF(\r\nTrim( pSubset ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No subset specified.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## Validate consolidation\r\npConsol = Trim( pConsol );\r\nIf( pConsol @<> '' );\r\n  If( DimIx( pDimension, pConsol ) = 0 );\r\n    ## The consolidation point does not exist in the dimension.\r\n    nErrors = 1;\r\n    sMessage = 'The ' | pConsol | ' consolidation does not exist in the '| pDimension |' dimension.';\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ItemReject( sMessage );\r\n  EndIf;\r\nEndIf;\r\n\r\n## Validate attribute\r\npAttribute = Trim( pAttribute );\r\nIF(\r\npAttribute @<> '' );\r\n\r\n  If( DimensionExists( cAttributeDim ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'Dimension: ' | pDimension | ' does not have any attributes.';\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ItemReject( sMessage );\r\n  EndIf;\r\n\r\n  IF(\r\n  DIMIX( cAttributeDim, pAttribute ) = 0 );\r\n    nErrors = 1;\r\n    sMessage = 'The ' | pAttribute |' attribute does not exist in the ' | pDimension | ' dimension.';\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ItemReject( sMessage );\r\n  EndIf;\r\n\r\n  sAttributeType = DType( cAttributeDim, pAttribute );\r\n  If(\r\n  sAttributeType @= 'AN' % sAttributeType @= 'N' );\r\n    If(\r\n    pAttributeValue @= '' );\r\n      nAttributeValue = 0;\r\n   Else;\r\n      nAttributeValue = StringToNumber( pAttributeValue );\r\n    EndIf;\r\n  EndIf;\r\nEndIf;\r\n\r\n\r\n## Validate element level\r\nIf(\r\npLevelFrom < 0 %\r\npLevelTo < 0 %\r\npLevelTo < pLevelFrom );\r\n  nErrors = 1;\r\n  sMessage = 'Element levels must be greater than or equal to zero and level to must be greater than or equal to level from';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate delimiter\r\nIF(\r\npExclusions @<> '' & pDelimiter @= '' );\r\n  ## Set to default parameter.\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n## Validate add to subset\r\nIF(\r\npAddToSubset <> 0 & pAddToSubset <> 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid value for pAddToSubset: ' | NumberToString( pAddToSubset ) | '. Valid values are 0 and 1';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## Validate Alias\r\nsDimAttr = '}ElementAttributes_' | pDimension;\r\nIF(\r\npAlias @<> '' );\r\n  IF(\r\n  DimensionExists( sDimAttr ) = 0 );\r\n    sMessage = 'No attributes exist for the dimension: ' | pDimension;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  ElseIf(\r\n  DIMIX( sDimAttr, pAlias ) = 0 );\r\n    sMessage = 'The Alias: ' | pAlias | ' does not exist in the dimension: ' | pDimension;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  ElseIf(\r\n  DTYPE( sDimAttr, pAlias ) @<> 'AA' );\r\n    sMessage = 'The Alias: ' | pAlias | ' is not an Alias in the dimension: ' | sDimAttr;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\nENDIF;\r\n\r\n### Prepare subset ###\r\nIF(\r\nSubsetExists( pDimension, pSubset ) = 1 );\r\n  If( pAddtoSubset <> 1 );\r\n    If( pDebug <= 1 );\r\n      SubsetDeleteAllElements( pDimension, pSubset );\r\n    EndIf;\r\n    nSubsetSize = 0;\r\n\r\n    If( pDebug >= 1 );\r\n      sMessage = 'Subset: ' | pSubset | ' exists. Delete all elements from the subset.';\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n  Else;\r\n    nSubsetSize = SubsetGetSize( pDimension, pSubset );\r\n\r\n    If( pDebug >= 1 );\r\n      sMessage = 'Subset: ' | pSubset | ' exists. Add to subset.';\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n\r\n  EndIf;\r\nElse;\r\n  If( pDebug <= 1 );\r\n    SubsetCreate( pDimension, pSubset );\r\n  EndIf;\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Subset: ' | pSubset | ' does not exist. Create Subset.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  nSubsetSize = 0;\r\nEndIf;\r\n\r\n### Set Alias ###\r\nIF(\r\npAlias @<> '' );\r\n  If( pDebug <= 1 );\r\n    SubsetAliasSet( pDimension, pSubset, pAlias );\r\n  EndIf;\r\n\r\n  If( pDebug >= 1 );\r\n    sMessage = 'The Alias: ' | pAlias | ' has been set.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\nENDIF;\r\n\r\n### Assign Datasource ###\r\n\r\nDatasourceNameForServer = pDimension;\r\nDataSourceDimensionSubset = 'All';\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Metadata.debug';\r\n\r\nEndIf;\r\n\r\n\r\n### Check for errors in prolog ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\n### Add elements to subset ###\r\n\r\n## Check that element is a descendant of specified consolidation\r\nIf( pConsol @<> '' );\r\n  If( ElIsAnc( pDimension, pConsol, vElement) = 0 & vElement @<> pConsol );\r\n    ItemSkip;\r\n  EndIf;\r\nEndIf;\r\n\r\n## Check that element has a matching attribute value\r\nIf( pAttribute @<> ''  );\r\n  If( sAttributeType @= 'AN' % sAttributeType @= 'N' );\r\n    If( AttrN( pDimension, vElement, pAttribute ) <> nAttributeValue );\r\n      ItemSkip;\r\n    EndIf;\r\n  Else;\r\n    If( AttrS( pDimension, vElement, pAttribute ) @<> pAttributeValue );\r\n      ItemSkip;\r\n    EndIf;\r\n  EndIf;\r\nEndIf;\r\n\r\n## Check that element has an appropriate element level\r\nnElementLevel = ElLev( pDimension, vElement );\r\nIf( nElementLevel < pLevelFrom % nElementLevel > pLevelTo );\r\n  ItemSkip;\r\nEndIf;\r\n\r\n## Add element to subset\r\nnSubsetSize = nSubsetSize + 1;\r\nIf( pDebug >= 1 );\r\n  AsciiOutput( sDebugFile, 'Element: ' | vElement | ' to be added to subset.' );\r\nEndIf;\r\nIf( pDebug <= 1 );\r\n  SubsetElementInsert( pDimension, pSubset, vElement, nSubsetSize );\r\nEndIf;\r\n\r\n\r\n### End Metadata ###", "DataSource": {"dataSourceNameForServer": "}Cubes", "dataSourceNameForClient": "}Cubes", "Type": "TM1DimensionSubset", "subset": "All"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\nEndIf;\r\n\r\n\r\n\r\n\r\n\r\n### Process Exclusions ###\r\n\r\nIF(\r\n nErrors = 0 & pDebug <= 1 &\r\nTrim( pExclusions ) @<> '' );\r\n  ExecuteProcess( 'Bedrock.Dim.Sub.Exclude',\r\n    'pDimension', pDimension,\r\n    'pSubset', pSubset,\r\n    'pElements', pExclusions,\r\n    'pDelimiter', pDelimiter,\r\n    'pDebug', pDebug\r\n  );\r\nEndIf;\r\n\r\n\r\n### Finalise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f"]}