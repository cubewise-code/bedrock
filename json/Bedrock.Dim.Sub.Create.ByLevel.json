{"Parameters": [{"Prompt": "Dimension Name", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "Sort the Subset (1)", "Type": "Numeric", "Value": 0, "Name": "pSort"}, {"Prompt": "Convert the Subset to Static (1)", "Type": "Numeric", "Value": 1, "Name": "pConvertStatic"}, {"Prompt": "Assign an alias to the subset", "Type": "String", "Value": "", "Name": "pAlias"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Sub.Create.ByLevel", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process creates static subsets named \"All level <nn>\" for the specified\r\n# dimension level or for all levels in the dimension\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Sub.Create.ByLevel';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pDimension     : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pSort          : ' | NumberToString( pSort ) );\r\n  AsciiOutput( sDebugFile, '            pConvertStatic : ' | NumberToString( pConvertStatic ) );\r\n  AsciiOutput( sDebugFile, '            pAlias : ' | pAlias );\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate dimension\r\nIf( Trim( pDimension ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( DimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## Validate Alias\r\n\r\nIF(\r\npAlias @<> '' );\r\n\r\n  sDimAttr = '}ElementAttributes_' | pDimension;\r\n  IF(\r\n  DimensionExists( sDimAttr ) = 0 );\r\n    sMessage = 'No attributes exist for the dimension: ' | pDimension;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(\r\n  DIMIX( sDimAttr, pAlias ) = 0 );\r\n    sMessage = 'The Alias: ' | pAlias | ' does not exist in the dimension: ' | pDimension;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(\r\n  DTYPE( sDimAttr, pAlias ) @<> 'AA' );\r\n    sMessage = 'The Alias: ' | pAlias | ' is not an Alias in the dimension: ' | sDimAttr;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  EndIf;\r\nENDIF;\r\n\r\n\r\n### Build Subset ###\r\n\r\nIf( pDebug <= 1 );\r\n  nLevel = 0;\r\n  nLevelMax = DnLev( pDimension ) - 1;\r\n  While( nLevel <= nLevelMax );\r\n    # Loop through the levels of the dimension.\r\n    sLevel = NumberToString( nLevel );\r\n    sSubset = 'All Level ' | Fill( '0', 2 - Long( sLevel ) ) | sLevel;\r\n    If( SubsetExists( pDimension, sSubset ) = 1 );\r\n      # Need to destroy the subset because the subset may change from a MDX subset to a Static Subset.\r\n      SubsetDestroy( pDimension, sSubset );\r\n    EndIf;\r\n\r\n    # Generate MDX\r\n    sMDX = '{ TM1FILTERBYLEVEL( { TM1SUBSETALL( [' | pDimension | '] ) }, ' | sLevel | ' ) }';\r\n    If( pSort = 1 );\r\n      sMDX = '{ TM1SORT( ' | sMDX | ', ASC ) }';\r\n    EndIf;\r\n\r\n    ## Build Subset for the level.\r\n    If( pConvertStatic = 1 );\r\n      # Convert the subset to a static subset\r\n      sSubsetMDX = '}' | cProcess | '.' | NumberToString( Int( Rand() * 100000 ) );\r\n      If( SubsetExists( pDimension, sSubsetMDX ) = 1 );\r\n        SubsetDestroy( pDimension, sSubsetMDX );\r\n      EndIF;\r\n      SubsetCreatebyMDX( sSubsetMDX, sMDX );\r\n      nSubsetSize = SubsetGetSize( pDimension, sSubsetMDX );\r\n      nSubsetIndex = 0;\r\n      SubsetCreate( pDimension, sSubset );\r\n      While( nSubsetIndex < nSubsetSize );\r\n        nSubsetIndex = nSubsetIndex + 1;\r\n        sElement = SubsetGetElementName( pDimension, sSubsetMDX, nSubsetIndex );\r\n        SubsetElementInsert( pDimension, sSubset, sElement, nSubsetIndex );\r\n      End;\r\n    Else;\r\n      SubsetCreatebyMDX( sSubset, sMDX );\r\n    EndIf;\r\n\r\n    ### Assign Alias to subset\r\n    IF(\r\n    pAlias @<> '' );\r\n      If( pDebug <= 1 );\r\n        SubsetAliasSet( pDimension, sSubset, pAlias );\r\n      EndIf;\r\n\r\n      If( pDebug >= 1 );\r\n        sMessage = 'The Alias: ' | pAlias | ' has been set.';\r\n        AsciiOutput( sDebugFile, sMessage );\r\n      EndIf;\r\n    ENDIF;\r\n\r\n    nLevel = nLevel + 1;\r\n  End;\r\nEndIf;\r\n\r\n\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}