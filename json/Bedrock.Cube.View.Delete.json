{"Parameters": [{"Prompt": "List of Cubes Separated by Delimiter (Blank = All Cubes)", "Type": "String", "Value": "", "Name": "pCubes"}, {"Prompt": "List of Views Separated by Delimiter. Wildcards Permitted on View Names.", "Type": "String", "Value": "}Bedrock*", "Name": "pViews"}, {"Prompt": "Delimiter Character", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.View.Delete", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process deletes public views\r\n\r\n# Notes:\r\n# - This process can work on a single cubes or multiple cubes\r\n# - This process can work on a single view or multiple views\r\n# - When specifying view names wildcards can be specified by using the * character\r\n\r\n# Parameters:\r\n# - pCubes:\r\n#   - To specify which cubes to delete views from use the pCubes parameter\r\n#   - To delete views from a single cube only just specify that cube name e.g. Sales\r\n#   - To delete views from multiple cubes specify each cube name seperated by a delimiter e.g. Sales;Inventory;Cashflow\r\n#   - To delete views from all cubes then leave pCubes parameter blank\r\n#   - If any invalid cubes are specified they will be skipped but the process will continue to process the other cubes\r\n# - pViews:\r\n#   - To specify which views to delete use the pViews parameter\r\n#   - This parameter must be specified, a blank value will cause the process to terminate\r\n#   - To delete a single view only just specify that view name e.g. SalesByProduct\r\n#   - To delete multiple views specify each view name seperated by a delimiter e.g. SalesByProduct;SalesByManager;SalesByStore\r\n#   - When specifying view names wildcards are permitted and all views that match the wildcard search string will be deleted\r\n#     - The wildcard search string follows the same format as windows based file wildcards\r\n#     - To delete all views that \"start\" with a specific string use a trailing * e.g. Bedrock*\r\n#     - To delete all views that \"end\" in a specific string use a leading * e.g. *Bedrock\r\n#     - To delete all views that \"contain\" a specific string use leading and trailing *'s e.g. *Bedrock*\r\n#     - To delete a single specific view only don't use *'s at all e.g. Bedrock\r\n#     - To specify multiple search stings list them all seperated by a delimiter e.g. Bedrock*;*Temp;*Test*\r\n#   - Specific view names and wildcard based names can both be used together e.g. SalesByProduct;Bedrock*\r\n# - pDelimiter:\r\n#   - The delimiter is used when specifying multiple cubes and/or multiple views\r\n#   - The default delimiter is ;\r\n#   - Any delimiter can be used by specifying a value for pDelimiter\r\n#   - Choose a delimiter that won't be used in either the wildcard search strings or cube names\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.View.Delete';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\ncDimension = '}Cubes';\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pCubes     : ' | pCubes );\r\n  AsciiOutput( sDebugFile, '            pViews     : ' | pViews );\r\n  AsciiOutput( sDebugFile, '            pDelimiter : ' | pDelimiter );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate views\r\nIf( Trim( pViews ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No views specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate delimiter\r\nIf( Trim( pDelimiter ) @= '' );\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n\r\n### Iterate through cubes ###\r\n\r\n# If no cube has been specified then process all cubes\r\nIf( Trim( pCubes ) @= '' );\r\n\r\n  nElemTotal = DimSiz( cDimension );\r\n  nElemIndex = 1;\r\n\r\n  While( nElemIndex <= nElemTotal );\r\n    # Determine cube name\r\n    sCube = DimNm( cDimension, nElemIndex );\r\n    # Exclude control cubes\r\n    If( SubSt( sCube, 1, 1 ) @<> '}' );\r\n      If( Trim( pCubes ) @= '' );\r\n        pCubes = sCube;\r\n      Else;\r\n        pCubes = pCubes | pDelimiter | sCube;\r\n      EndIf;\r\n    EndIf;\r\n    nElemIndex = nElemIndex + 1;\r\n  End;\r\n\r\nEndIf;\r\n\r\n# Work through all cubes specified in pCubes\r\nsCubes = pCubes;\r\nnCubeDelimIndex = 1;\r\n\r\nWhile( nCubeDelimIndex <> 0 );\r\n\r\n  nCubeDelimIndex = Scan( pDelimiter, sCubes  );\r\n  If( nCubeDelimIndex = 0 );\r\n    sCube = Trim( sCubes );\r\n  Else;\r\n    sCube = Trim( SubSt( sCubes, 1, nCubeDelimIndex - 1 ) );\r\n    sCubes = Trim( SubSt( sCubes, nCubeDelimIndex + Long( pDelimiter ), Long( sCubes ) ) );\r\n  EndIf;\r\n\r\n  # If a valid cube has been specified then delete specified views from it\r\n  If( CubeExists( sCube ) = 1 );\r\n\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, 'Cube: ' | sCube | ' OK' );\r\n    EndIf;\r\n\r\n    # Work through all views specified in pViews\r\n    sViews = pViews;\r\n    nViewDelimIndex = 1;\r\n\r\n    While( nViewDelimIndex <> 0 );\r\n      nViewDelimIndex = Scan( pDelimiter, sViews );\r\n      If( nViewDelimIndex = 0 );\r\n        sView = sViews;\r\n      Else;\r\n        sView = SubSt( sViews, 1, nViewDelimIndex - 1 );\r\n        sViews = SubSt( sViews, nViewDelimIndex + Long( pDelimiter ), Long( sViews ) );\r\n      EndIf;\r\n\r\n      # Check if a wildcard has been used to specify the view name.\r\n      # If it hasn't then just delete the view if it exists\r\n      # If it has then search the relevant views folder to find the matches\r\n      If( Scan( '*', sView ) = 0 );\r\n        If( ViewExists( sCube, sView ) = 1 );\r\n          If( pDebug >= 1 );\r\n            AsciiOutput( sDebugFile, 'View: ' | sView | ' OK' );\r\n          EndIf;\r\n          If( pDebug <= 1 );\r\n            ViewDestroy( sCube, sView );\r\n          EndIf;\r\n        EndIf;\r\n      Else;\r\n        # Wildcard search string\r\n        sSearch = '.\\' | sCube | '}vues\\' | sView | '.vue';\r\n\r\n        # Find all views that match search string\r\n        sFilename = WildcardFileSearch( sSearch, '' );\r\n        While( sFilename @<> '' );\r\n          # Trim .vue off the filename\r\n          sView = SubSt( sFilename, 1, Long( sFilename ) - 4 );\r\n          # Delete view\r\n          If( ViewExists( sCube, sView ) = 1 );\r\n            If( pDebug >= 1 );\r\n              AsciiOutput( sDebugFile, 'View: ' | sView | ' OK' );\r\n            EndIf;\r\n            If( pDebug <= 1 );\r\n              ViewDestroy( sCube, sView );\r\n            EndIf;\r\n          EndIf;\r\n          sFilename = WildcardFileSearch( sSearch, sFilename );\r\n        End;\r\n      EndIf;\r\n    End;\r\n\r\n  # Cube does not exist\r\n  Else;\r\n\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, 'Cube: ' | sCube | ' does not exist' );\r\n    EndIf;\r\n\r\n  EndIf;\r\n\r\nEnd;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}