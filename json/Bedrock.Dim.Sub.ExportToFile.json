{"Parameters": [{"Prompt": "Dimension", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "Subset", "Type": "String", "Value": "", "Name": "pSubset"}, {"Prompt": "Export File Path", "Type": "String", "Value": "", "Name": "pExportPath"}, {"Prompt": "Export File Name (Default Extension .csv)", "Type": "String", "Value": "", "Name": "pExportFile"}, {"Prompt": "Boolean: 1 = Yes include header row", "Type": "Numeric", "Value": 1, "Name": "pTitleRecord"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for error in prolog ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\n### Check whether to write title records ###\r\n\r\nnRecordCount = nRecordCount + 1;\r\n\r\nIf( pDebug <= 1 & nRecordCount = 1 & pTitleRecord = 1 );\r\n\r\n  nSubsetSize = SubSetGetSize( pDimension, pSubset );\r\n\r\n  # Write params\r\n  AsciiOutput(\r\n    sFile,\r\n    'Export from dimension: ' | pDimension | ', Subset: ' | pSubset |\r\n    ', Total elements: ' | NumberToString( nSubsetSize ) |\r\n    '. On ' | Date( Now, 1 ) | ' at ' | Time\r\n   );\r\n  # Write header records\r\n  AsciiOutput(\r\n    sFile,\r\n    'Subix',\r\n    'Element',\r\n    'Alias: ' | sAlias,\r\n    'Dimix',\r\n    'El Type',\r\n    'Level',\r\n    'Num Children',\r\n    'Parent 1',\r\n    'Weight 1',\r\n    'Parent 2',\r\n    'Weight 2',\r\n    'Parent 3',\r\n    'Weight 3',\r\n    'Parent 4',\r\n    'Weight 4',\r\n    'Parent 5',\r\n    'Weight 5'\r\n  );\r\n\r\nEndIf;\r\n\r\n\r\n### Write dimension info to flat file ###\r\n\r\nsElement = DimensionElementPrincipalName( pDimension, vElement );\r\nsSubix = NumberToString( nRecordCount );\r\nsIndex = NumberToString( DimIx( pDimension, vElement ) );\r\nsType = DType( pDimension, vElement );\r\nsLevel = NumberToString( ElLev( pDimension, vElement ) );\r\nsChild = NumberToString( ElCompN( pDimension, vElement ) );\r\nsParent1 = ElPar( pDimension, vElement, 1 );\r\nsParent2 = ElPar( pDimension, vElement, 2 );\r\nsParent3 = ElPar( pDimension, vElement, 3 );\r\nsParent4 = ElPar( pDimension, vElement, 4 );\r\nsParent5 = ElPar( pDimension, vElement, 5 );\r\nsWeight1 = NumberToString( ElWeight( pDimension, sParent1, vElement ) );\r\nsWeight2 = NumberToString( ElWeight( pDimension, sParent2, vElement ) );\r\nsWeight3 = NumberToString( ElWeight( pDimension, sParent3, vElement ) );\r\nsWeight4 = NumberToString( ElWeight( pDimension, sParent4, vElement ) );\r\nsWeight5 = NumberToString( ElWeight( pDimension, sParent5, vElement ) );\r\n\r\nIf( sAlias @<> '(no alias)' );\r\n  sAliasValue = AttrS( pDimension, vElement, sAlias );\r\nElse;\r\n  sAliasValue = '';\r\nEndIf;\r\n\r\nIf( pDebug <= 1 );\r\n  AsciiOutput(\r\n    sFile,\r\n    sSubix,\r\n    sElement,\r\n    sAliasValue,\r\n    sIndex,\r\n    sType,\r\n    sLevel,\r\n    sChild,\r\n    sParent1,\r\n    sWeight1,\r\n    sParent2,\r\n    sWeight2,\r\n    sParent3,\r\n    sWeight3,\r\n    sParent4,\r\n    sWeight4,\r\n    sParent5,\r\n    sWeight5\r\n  );\r\nEndIf;\r\n\r\n\r\n### End Data ###", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "vElement"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Sub.ExportToFile", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will Export a dimension subset to a file.\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Sub.ExportToFile';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pDimension   : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pSubset      : ' | pSubset );\r\n  AsciiOutput( sDebugFile, '            pExportPath  : ' | pExportPath );\r\n  AsciiOutput( sDebugFile, '            pExportFile  : ' | pExportFile );\r\n  AsciiOutput( sDebugFile, '            pTitleRecord : ' | NumberToString( pTitleRecord ) );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate dimension\r\nIf( Trim( pDimension ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( DimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate subset\r\nIf( Trim( pSubset ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No subset specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( SubsetExists( pDimension, pSubset ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid subset: ' | pSubset | ' in dimension: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate file path\r\n# Strip off trailing backslash (if present)\r\nIf( SubSt( pExportPath, Long( pExportPath ), 1 ) @= '\\' );\r\n  pExportPath = SubSt( pExportPath, 1, Long( pExportPath ) - 1 );\r\nEndIf;\r\nIf( FileExists( pExportPath ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid export path specified. Folder does not exist.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate filename\r\n# If no file name then default to Dimension.Subset.Export.csv\r\nIf( pExportFile @= '' );\r\n  pExportFile = pDimension |'.'| pSubset |'.Export.csv';\r\nElse;\r\n  If( Scan( '.', pExportFile ) = 0 );\r\n    # No file extension specified\r\n    pExportFile = pExportFile | '.csv';\r\n  EndIf;\r\nEndIf;\r\nsFile = pExportPath | '\\' | pExportFile;\r\n\r\n\r\n### Initialise & declare variables ###\r\n\r\nnRecordCount = 0;\r\n\r\n\r\n### Determine if alias exists ###\r\n\r\nsAttributeDim = '}ElementAttributes_' | pDimension;\r\nsAlias = '(no alias)';\r\nIf( DimensionExists( sAttributeDim ) = 1 );\r\n  nElementIndex = 1;\r\n  nElementCount = DimSiz( sAttributeDim );\r\n  While( nElementIndex <= nElementCount );\r\n    sAttribute = DimNm( sAttributeDim, nElementIndex );\r\n    If( SubSt( DType( sAttributeDim, sAttribute ), 2, 1 ) @= 'A' );\r\n      sAlias = sAttribute;\r\n      nElementIndex = nElementCount;\r\n    EndIf;\r\n    nElementIndex = nElementIndex + 1;\r\n  End;\r\nEndIf;\r\n\r\n\r\n### Assign Data Source ###\r\n\r\nDatasourceNameForServer = pDimension;\r\nDatasourceNameForClient = pDimension;\r\nDataSourceType = 'SUBSET';\r\nDatasourceDimensionSubset = pSubset;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"dataSourceNameForServer": "}Cubes", "dataSourceNameForClient": "}Cubes", "Type": "TM1DimensionSubset", "subset": "All"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f"]}