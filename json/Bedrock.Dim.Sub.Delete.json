{"Parameters": [{"Prompt": "List of Dimensions Separated by Delimiter (Blank = All Dimensions)", "Type": "String", "Value": "", "Name": "pDimensions"}, {"Prompt": "List of Subsets Separated by Delimiter. Wild-cards Permitted on Subset Names.", "Type": "String", "Value": "}Bedrock*", "Name": "pSubsets"}, {"Prompt": "Delimiter Character", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Sub.Delete", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process deletes public subsets\r\n\r\n# Notes:\r\n# - This process can work on a single dimension or multiple dimensions\r\n# - This process can work on a single subset or multiple subsets\r\n# - When specifying subset names wildcards can be specified by using the * character\r\n\r\n# Parameters:\r\n# - pDimensions:\r\n#   - To specify which dimensions to delete subsets from use the pDimensions parameter\r\n#   - To delete subsets from a single dimension only just specify that dimension name e.g. Product\r\n#   - To delete subsets from multiple dimensions specify each dimension name seperated by a delimiter e.g. Product;Customer;Account\r\n#   - To delete subsets from all dimensions then leave pDimensions parameter blank\r\n#   - If any invalid dimensions are specified they will be skipped but the process will continue to process the other dimensions\r\n# - pSubsets:\r\n#   - To specify which subsets to delete use the pSubsets parameter\r\n#   - This parameter must be specified, a blank value will cause the process to terminate\r\n#   - To delete a single subset only just specify that subset name e.g. SmallProducts\r\n#   - To delete multiple subsets specify each subset name seperated by a delimiter e.g. SmallProducts;LargeProducts\r\n#   - When specifying subset names wildcards are permitted and all subsets that match the wildcard search string will be deleted\r\n#     - The wildcard search string follows the same format as windows based file wildcards\r\n#     - To delete all subsets that \"start\" with a specific string use a trailing * e.g. Bedrock*\r\n#     - To delete all subsets that \"end\" in a specific string use a leading * e.g. *Bedrock\r\n#     - To delete all subsets that \"contain\" a specific string use leading and trailing *'s e.g. *Bedrock*\r\n#     - To delete a single specific subset only don't use *'s at all e.g. Bedrock\r\n#     - To specify multiple search stings list them all seperated by a delimiter e.g. Bedrock*;*Temp;*Test*\r\n#   - Specific subset names and wildcard based names can both be used together e.g. SalesByProduct;Bedrock*\r\n# - pDelimiter:\r\n#   - The delimiter is used when specifying multiple dimensions and/or multiple subsets\r\n#   - The default delimiter is ;\r\n#   - Any delimiter can be used by specifying a value for pDelimiter\r\n#   - Choose a delimiter that won't be used in either the wildcard search strings or dimension names\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Sub.Delete';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\ncDimension = '}Dimensions';\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pDimensions : ' | pDimensions );\r\n  AsciiOutput( sDebugFile, '            pSubsets    : ' | pSubsets );\r\n  AsciiOutput( sDebugFile, '            pDelimiter  : ' | pDelimiter );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate subsets\r\nIf( Trim( pSubsets ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No subsets specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate delimiter\r\nIf( Trim( pDelimiter ) @= '' );\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n\r\n### Iterate through dimensions ###\r\n\r\n# If no dimension has been specified then process all dimensions\r\nIf( Trim( pDimensions ) @= '' );\r\n\r\n  nElemTotal = DimSiz( cDimension );\r\n  nElemIndex = 1;\r\n\r\n  While( nElemIndex <= nElemTotal );\r\n    # Determine dimension name\r\n    sDimension = DimNm( cDimension, nElemIndex );\r\n    # Exclude control dimensions\r\n    If( SubSt( sDimension, 1, 1 ) @<> '}' );\r\n      If( Trim( pDimensions ) @= '' );\r\n        pDimensions = sDimension;\r\n      Else;\r\n        pDimensions = pDimensions | pDelimiter | sDimension;\r\n      EndIf;\r\n    EndIf;\r\n    nElemIndex = nElemIndex + 1;\r\n  End;\r\n\r\nEndIf;\r\n\r\n# Work through all dimensions specified in pDimensions\r\nsDimensions = pDimensions;\r\nnDimensionDelimIndex = 1;\r\n\r\nWhile( nDimensionDelimIndex <> 0 );\r\n\r\n  nDimensionDelimIndex = Scan( pDelimiter, sDimensions  );\r\n  If( nDimensionDelimIndex = 0 );\r\n    sDimension = Trim( sDimensions );\r\n  Else;\r\n    sDimension = Trim( SubSt( sDimensions, 1, nDimensionDelimIndex - 1 ) );\r\n    sDimensions = Trim( SubSt( sDimensions, nDimensionDelimIndex + Long( pDelimiter ), Long( sDimensions ) ) );\r\n  EndIf;\r\n\r\n  # If a valid dimension has been specified then delete specified views from it\r\n  If( DimensionExists( sDimension ) = 1 );\r\n\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, 'Dimension: ' | sDimension | ' OK' );\r\n    EndIf;\r\n\r\n    # Work through all subsets specified in pSubsets\r\n    sSubsets = pSubsets;\r\n    nSubsetDelimIndex = 1;\r\n\r\n    While( nSubsetDelimIndex <> 0 );\r\n      nSubsetDelimIndex = Scan( pDelimiter, sSubsets );\r\n      If( nSubsetDelimIndex = 0 );\r\n        sSubset = sSubsets;\r\n      Else;\r\n        sSubset = SubSt( sSubsets, 1, nSubsetDelimIndex - 1 );\r\n        sSubsets = SubSt( sSubsets, nSubsetDelimIndex + Long( pDelimiter ), Long( sSubsets ) );\r\n      EndIf;\r\n\r\n      # Check if a wildcard has been used to specify the subset name.\r\n      # If it hasn't then just delete the subset if it exists\r\n      # If it has then search the relevant subsets folder to find the matches\r\n      If( Scan( '*', sSubset ) = 0 );\r\n        If( SubsetExists( sDimension, sSubset ) = 1 );\r\n          If( pDebug >= 1 );\r\n            AsciiOutput( sDebugFile, 'Subset: ' | sSubset | ' OK' );\r\n          EndIf;\r\n          If( pDebug <= 1 );\r\n            SubsetDestroy( sDimension, sSubset );\r\n          EndIf;\r\n        EndIf;\r\n      Else;\r\n        # Wildcard search string\r\n        sSearch = '.\\' | sDimension | '}subs\\' | sSubset | '.sub';\r\n\r\n        # Find all subsets that match search string\r\n        sFilename = WildcardFileSearch( sSearch, '' );\r\n        While( sFilename @<> '' );\r\n          # Trim .sub off the filename\r\n          sSubset = SubSt( sFilename, 1, Long( sFilename ) - 4 );\r\n          # Delete subset\r\n          If( SubsetExists( sDimension, sSubset ) = 1 );\r\n            If( pDebug >= 1 );\r\n              AsciiOutput( sDebugFile, 'Subset: ' | sSubset | ' OK' );\r\n            EndIf;\r\n            If( pDebug <= 1 );\r\n              SubsetDestroy( sDimension, sSubset );\r\n            EndIf;\r\n          EndIf;\r\n          sFilename = WildcardFileSearch( sSearch, sFilename );\r\n        End;\r\n      EndIf;\r\n    End;\r\n\r\n  # Dimension does not exist\r\n  Else;\r\n\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, 'Dimension: ' | sDimension | ' does not exist' );\r\n    EndIf;\r\n\r\n  EndIf;\r\n\r\nEnd;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}