{"Parameters": [{"Prompt": "Client Names Seperated by Delimiter", "Type": "String", "Value": "", "Name": "pClients"}, {"Prompt": "New Password", "Type": "String", "Value": "", "Name": "pPassword"}, {"Prompt": "Delimiter character", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Security.Client.Password.Reset", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process can be used by admins to reset a client password.\r\n# If called from a workbook/websheet in conjunction with the TM1User function\r\n# can also be used by users to change their password\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Security.Client.Create';\r\ncTM1User = TM1User();\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Preocess Execute: ' | cTM1User );\r\n  AsciiOutput( sDebugFile, 'Parameters: pClients   : ' | pClients );\r\n  AsciiOutput( sDebugFile, '            pPassword  : *** Not logged for security reasons ***' );\r\n  AsciiOutput( sDebugFile, '            pDelimiter : ' | pDelimiter );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelimiter @= '' );\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n# If no clients have been specified then terminate process\r\nIf( Trim( pClients ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No clients specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Check if the person executing the process has admin rights\r\n\r\nIF(\r\nCELLGETS( '}ClientGroups', cTM1User, 'Admin' ) @<> 'ADMIN' &\r\nCELLGETS( '}ClientGroups', cTM1User, 'DataAdmin' ) @<> 'DataAdmin' &\r\ncTM1User @<> pClients );\r\n  nErrors = 1;\r\n  sMessage = 'No Admin access to change other clients password.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nENDIF;\r\n\r\n### Split pClients into individual clients and reset password ###\r\n\r\nsClients = pClients;\r\nnDelimiterIndex = 1;\r\n\r\nWhile( nDelimiterIndex <> 0 );\r\n  nDelimiterIndex = Scan( pDelimiter, sClients );\r\n  If( nDelimiterIndex = 0 );\r\n    sClient = sClients;\r\n  Else;\r\n    sClient = Trim( SubSt( sClients, 1, nDelimiterIndex - 1 ) );\r\n    sClients = Trim( Subst( sClients, nDelimiterIndex + Long(pDelimiter), Long( sClients ) ) );\r\n  EndIf;\r\n  # Don't attempt to update a blank client\r\n  If( sClient @<> '' );\r\n    If( DimIx( '}Clients', sClient ) <> 0 );\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Client: ' | sClient | ' OK' );\r\n      EndIf;\r\n      If( pDebug <= 1 );\r\n        sClient = DimensionElementPrincipalName( '}Clients', sClient );\r\n        AssignClientPassword( sClient, pPassword );\r\n      EndIf;\r\n    Else;\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Client: ' | sClient | ' does not exist' );\r\n      EndIf;\r\n    EndIf;\r\n  EndIf;\r\nEnd;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}