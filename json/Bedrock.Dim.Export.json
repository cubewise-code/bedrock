{"Parameters": [{"Prompt": "Dimension", "Type": "String", "Value": "Column", "Name": "pDimension"}, {"Prompt": "Export file path", "Type": "String", "Value": "C:\\Users\\adavis\\Documents\\Bedrock 3.0\\Export", "Name": "pExportPath"}, {"Prompt": "Export file name (default extension .csv)", "Type": "String", "Value": "", "Name": "pExportFile"}, {"Prompt": "Boolean 1 = Yes - Include header row", "Type": "Numeric", "Value": 1, "Name": "pTitleRecord"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for error in prolog ###\r\n\r\nIf( nErrors > 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\n### Record Count\r\n\r\nnRecordCount = nRecordCount + 1;\r\n\r\n### Export Header Information\r\n\r\n## Line 1: File Metadata information\r\nIf( \r\nnRecordCount = 1 & pTitleRecord = 1 );\r\n  AsciiOutput( sFilename,\r\n    'Export from dimension: ' | pDimension | ', all elements in index order. Total elements=' |\r\n      NumberToString( DimSiz( pDimension ) ) | '. On ' | Date( Now, 1 ) | ' at ' | Time );\r\n\r\n## Line 2: Source Dimension\r\nAsciiOutput( sFilename,\r\n    pDimension  );\r\n\r\n## Line 2: Sort Order Information\r\nsSortElementType = CELLGETS( cCubeS1, pDimension, 'SORTELEMENTSTYPE' );\r\nsSortComponentType = CELLGETS( cCubeS1, pDimension, 'SORTCOMPONENTSTYPE' );\r\nsSortElementSense =  CELLGETS( cCubeS1, pDimension, 'SORTELEMENTSSENSE' );\r\nsSortComponentSense =  CELLGETS( cCubeS1, pDimension, 'SORTCOMPONENTSSENSE' );\r\nAsciiOutput( sFilename,\r\n    sSortElementType , sSortComponentType , sSortElementSense , sSortComponentSense  );\r\n\r\n## Line 3: Header Information\r\n  AsciiOutput( sFilename, 'Reserved' );\r\n\r\n## Line 4: Header Information\r\n  AsciiOutput( sFilename, 'Reserved' );\r\n\r\n## Line 6: Header Information\r\n  AsciiOutput( sFilename,\r\n    'Line_Type', 'Element', 'Value_1', 'Value_2', 'Value_3' );\r\n\r\n### Attribute Information \r\n  sAttrDimName = '}ElementAttributes_' | pDimension;\r\n  IF(\r\n  DimensionExists( sAttrDimName ) = 1 );\r\n    nIndex = 1;\r\n    nLimit = DIMSIZ ( sAttrDimName );\r\n    WHILE( nIndex <= nLimit );\r\n      sElName = DIMNM( sAttrDimName, nIndex );\r\n      sElType = DTYPE( sAttrDimName, sElName );\r\n      AsciiOutput( sFilename, 'A', sElName, sElType );\r\n      nIndex = nIndex + 1;\r\n    END; \r\n  ENDIF;\r\n\r\nENDIF;\r\n\r\n\r\n### Element Information\r\nnElIndex = DIMIX ( pDimension, vElement );\r\nsElType = DTYPE( pDimension, vElement );\r\nAsciiOutput( sFilename,\r\n  'E', vElement, sElType, NumberToString( nElIndex ) );\r\n\r\n### Element Parents\r\nnElPar =ELPARN( pDimension, vElement );\r\nIF(\r\nnElPar > 0 );\r\n  nIndex = 1;\r\n  nLimit = nElPar;\r\n  WHILE( nIndex <= nLimit );\r\n    sElPar = ELPAR( pDimension, vElement, nIndex );\r\n    sElType = DTYPE( pDimension, sElPar );\r\n    nElWgt  = ElWeight( pDimension, sElPar, vElement );\r\n    AsciiOutput( sFilename, 'P', vElement, sElPar, sElType, NumberToString( nElWgt ) );\r\n    nIndex = nIndex + 1;\r\n  END;\r\nENDIF;\r\n\r\n### Attribute Value \r\nIF(\r\nDimensionExists( sAttrDimName ) = 1 );\r\n  nIndex = 1;\r\n  nLimit = DIMSIZ ( sAttrDimName );\r\n  WHILE( nIndex <= nLimit );\r\n    sElName = DIMNM( sAttrDimName, nIndex );\r\n    sElType = DTYPE( sAttrDimName, sElName );\r\n    IF(\r\n    sElType @= 'AN' );\r\n      sAttrValue = NumberToString( ATTRN( pDimension, vElement, sElName ) );\r\n    ELSE;\r\n      sAttrValue = ATTRS( pDimension, vElement, sElName );\r\n    ENDIF;\r\n    AsciiOutput( sFilename, 'V', vElement, sElName, sAttrValue );\r\n    nIndex = nIndex + 1;\r\n  END;\r\nENDIF;\r\n", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "vElement"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Export", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.0~~##\r\n#####################################################################################\r\n\r\n# This process will Export all Dimension elements to a File.\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Export';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pDimension   : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pExportPath  : ' | pExportPath );\r\n  AsciiOutput( sDebugFile, '            pExportFile  : ' | pExportFile );\r\n  AsciiOutput( sDebugFile, '            pTitleRecord : ' | NumberToString( pTitleRecord ) );\r\n\r\nEndIf;\r\n\r\n\r\n### Initialise ###\r\n\r\nnRecordCount = 0;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate dimension\r\nIf( Trim( pDimension ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( DimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate export path\r\nIf( FileExists( pExportPath ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid export path specified. Folder does not exist.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\nIf( SubSt( pExportPath, Long( pExportPath ), 1 ) @<> '\\' );\r\n   pExportPath = pExportPath | '\\';\r\nEndIf;\r\n\r\n# Validate export filename\r\nIf( pExportFile @= '' );\r\n  pExportFile = pDimension | '_Export.csv';\r\nElse;\r\n  If( Scan( '.', pExportFile ) = 0 );\r\n    # No file extension specified\r\n    pExportFile = pExportFile | '.csv';\r\n  EndIf;\r\nEndIf;\r\n\r\n# Construct full export filename including path\r\nsFilename = pExportPath | pExportFile;\r\n\r\n### Constants\r\ncCubeS1 = '}DimensionProperties';\r\n\r\n### Assign Data Source ###\r\n\r\nDatasourceNameForServer = pDimension;\r\nDatasourceNameForClient = pDimension;\r\nDataSourceType = 'SUBSET';\r\nDatasourceDimensionSubset = 'ALL';\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"dataSourceNameForServer": "}Cubes", "dataSourceNameForClient": "}Cubes", "Type": "TM1DimensionSubset", "subset": "All"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f"]}