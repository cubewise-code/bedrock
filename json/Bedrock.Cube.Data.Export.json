{"Parameters": [{"Prompt": "Cube", "Type": "String", "Value": "", "Name": "pCube"}, {"Prompt": "Temporary view name", "Type": "String", "Value": "", "Name": "pView"}, {"Prompt": "Filter: Year: 2006 + 2007 & Scenario: Actual + Budget & Organization: North America Operations", "Type": "String", "Value": "", "Name": "pFilter"}, {"Prompt": "Delimiter between dimensions", "Type": "String", "Value": "&", "Name": "pDimensionDelim"}, {"Prompt": "Delimiter for start of element list", "Type": "String", "Value": ":", "Name": "pElementStartDelim"}, {"Prompt": "Delimiter between elements", "Type": "String", "Value": "+", "Name": "pElementDelim"}, {"Prompt": "Skip Rule Values? (1=Skip)", "Type": "Numeric", "Value": 1, "Name": "pSkipRules"}, {"Prompt": "Skip Consolidted Values? (1=Skip)", "Type": "Numeric", "Value": 1, "Name": "pSkipCons"}, {"Prompt": "Zero Out view AFTER Copy? (Boolean 1=True)", "Type": "Numeric", "Value": 0, "Name": "pZeroSource"}, {"Prompt": "Retain temporary view and Subset ( 0 = Retain View and Subsets 1 = Delete View and Subsets 2 = Delete View only )", "Type": "Numeric", "Value": 1, "Name": "pDestroyTempObj"}, {"Prompt": "Export Directory", "Type": "String", "Value": "", "Name": "pFilePath"}, {"Prompt": "Export Filename (If Left Blank Defaults to cube_dim_ele_export.csv)", "Type": "String", "Value": "", "Name": "pFileName"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n### Data Count ###\r\nnDataCount = nDataCount + 1;\r\n\r\n### Output the Column titles;\r\nIF(\r\nnDataCount = 1);\r\n  If( nDimensionCount = 2 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, 'Value' );\r\n  ElseIf( nDimensionCount = 3 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, 'Value' );\r\n  ElseIf( nDimensionCount = 4 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, 'Value' );\r\n  ElseIf( nDimensionCount = 5 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, 'Value' );\r\n  ElseIf( nDimensionCount = 6 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, 'Value' );\r\n  ElseIf( nDimensionCount = 7 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, 'Value' );\r\n  ElseIf( nDimensionCount = 8 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, 'Value' );\r\n  ElseIf( nDimensionCount = 9 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9 );\r\n  ElseIf( nDimensionCount = 10 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, 'Value' );\r\n  ElseIf( nDimensionCount = 11 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, 'Value' );\r\n  ElseIf( nDimensionCount = 12 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, 'Value' );\r\n  ElseIf( nDimensionCount = 13 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, 'Value' );\r\n  ElseIf( nDimensionCount = 14 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, 'Value' );\r\n  ElseIf( nDimensionCount = 15 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, 'Value' );\r\n  ElseIf( nDimensionCount = 16 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, 'Value' );\r\n  ElseIf( nDimensionCount = 17 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, 'Value' );\r\n  ElseIf( nDimensionCount = 18 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, 'Value' );\r\n  ElseIf( nDimensionCount = 19 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, 'Value' );\r\n  ElseIf( nDimensionCount = 20 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, 'Value' );\r\n  ElseIf( nDimensionCount = 21 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, 'Value' );\r\n  ElseIf( nDimensionCount = 22 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, 'Value' );\r\n  ElseIf( nDimensionCount = 23 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22, sDim23, 'Value' );\r\n  ElseIf( nDimensionCount = 24 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22,\r\n      sDim23, sDim24, 'Value' );\r\n  ElseIf( nDimensionCount = 25 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22,\r\n      sDim23, sDim24, sDim25, 'Value' );\r\n  ElseIf( nDimensionCount = 26 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22,\r\n      sDim23, sDim24, sDim25, sDim26, 'Value' );\r\n  ElseIf( nDimensionCount = 27 );\r\n    AsciiOutput( cExportFile, 'Cube', sDim1, sDim2, sDim3, sDim4, sDim5, sDim6, sDim7, sDim8, sDim9, sDim10, sDim11, sDim12, sDim13, sDim14, sDim15, sDim16, sDim17, sDim18, sDim19, sDim20, sDim21, sDim22,\r\n      sDim23, sDim24, sDim25, sDim26, sDim27, 'Value' );\r\n  EndIf;\r\n\r\nENDIF;\r\n\r\n### Export data from source version to file ###\r\n# Selects the correct AsciiOutput formula depending upon the number of dimensions in the cube\r\n\r\nIF(\r\nSCAN( CHAR( 10 ), sValue ) > 0 );\r\n  sValueCleaned = '';\r\n  nNoChar = 1;\r\n  nLimit = LONG( sValue);\r\n  WHILE( nNoChar <= nLimit ) ;\r\n    sChar = SUBST(  sValue, nNoChar, 1);\r\n    IF(\r\n    CODE( sChar, 1 ) <> 10 );\r\n      sValueCleaned = sValueCleaned | sChar ;\r\n    ELSE;\r\n      sValueCleaned = sValueCleaned | ' ';\r\n    ENDIF;\r\n    nNoChar = nNoChar + 1;\r\n  END;\r\n  sValue = sValueCleaned;\r\nENDIF;\r\n\r\n\r\n\r\nIf( nDimensionCount = 2 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, sValue );\r\nElseIf( nDimensionCount = 3 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, sValue );\r\nElseIf( nDimensionCount = 4 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, sValue );\r\nElseIf( nDimensionCount = 5 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, sValue );\r\nElseIf( nDimensionCount = 6 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, sValue );\r\nElseIf( nDimensionCount = 7 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, sValue );\r\nElseIf( nDimensionCount = 8 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, sValue );\r\nElseIf( nDimensionCount = 9 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, sValue );\r\nElseIf( nDimensionCount = 10 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, sValue );\r\nElseIf( nDimensionCount = 11 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, sValue );\r\nElseIf( nDimensionCount = 12 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, sValue );\r\nElseIf( nDimensionCount = 13 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, sValue );\r\nElseIf( nDimensionCount = 14 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, sValue );\r\nElseIf( nDimensionCount = 15 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, sValue );\r\nElseIf( nDimensionCount = 16 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, sValue );\r\nElseIf( nDimensionCount = 17 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, sValue );\r\nElseIf( nDimensionCount = 18 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, sValue );\r\nElseIf( nDimensionCount = 19 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, sValue );\r\nElseIf( nDimensionCount = 20 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, sValue );\r\nElseIf( nDimensionCount = 21 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, sValue );\r\nElseIf( nDimensionCount = 22 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, sValue );\r\nElseIf( nDimensionCount = 23 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, sValue );\r\nElseIf( nDimensionCount = 24 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, sValue );\r\nElseIf( nDimensionCount = 25 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25, sValue );\r\nElseIf( nDimensionCount = 26 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25, v26, sValue );\r\nElseIf( nDimensionCount = 27 );\r\n  AsciiOutput( cExportFile, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25, v26, v27, sValue );\r\nEndIf;\r\n\r\n\r\n\r\n### End Data ###", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V1"}, {"Position": 2, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V2"}, {"Position": 3, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V3"}, {"Position": 4, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V4"}, {"Position": 5, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V5"}, {"Position": 6, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V6"}, {"Position": 7, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V7"}, {"Position": 8, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V8"}, {"Position": 9, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V9"}, {"Position": 10, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V10"}, {"Position": 11, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V11"}, {"Position": 12, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V12"}, {"Position": 13, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V13"}, {"Position": 14, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V14"}, {"Position": 15, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V15"}, {"Position": 16, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V16"}, {"Position": 17, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V17"}, {"Position": 18, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V18"}, {"Position": 19, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V19"}, {"Position": 20, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V20"}, {"Position": 21, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V21"}, {"Position": 22, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V22"}, {"Position": 23, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V23"}, {"Position": 24, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V24"}, {"Position": 25, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V25"}, {"Position": 26, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V26"}, {"Position": 27, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V27"}, {"Position": 28, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V28"}, {"Position": 29, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V29"}, {"Position": 30, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V30"}, {"Position": 31, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "Value"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.Data.Export", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This TI is designed to copy all data in a given cube to a file for a given \"element\"\r\n# (could be any dimension/element combination)\r\n\r\n# Note:\r\n# - As this TI has a view as a data source it requires the implicit variables NValue, SValue and Value_is_String\r\n# - To edit this TI without VIZIER either a temp cube with 27 dims is needed as the preview data source or set the data\r\n#   source to ASCII and manually edit the TI in notepad after saving to add back the required implicit view variables\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.Data.Export';\r\ncUser = TM1User();\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\ncDefaultView = 'Bedrock_' | sRandomInt ;\r\nnDataCount = 0;\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n  AsciiOutput( sDebugFile, 'TM1 User:        ' | cUser );\r\n  AsciiOutput( sDebugFile, '' );\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pCube:              ' | pCube );\r\n  AsciiOutput( sDebugFile, '            pView:              ' | pView );\r\n  AsciiOutput( sDebugFile, '            pFilter:            ' | pFilter );\r\n  AsciiOutput( sDebugFile, '            pDimensionDelim:    ' | pDimensionDelim );\r\n  AsciiOutput( sDebugFile, '            pElementStartDelim: ' | pElementStartDelim );\r\n  AsciiOutput( sDebugFile, '            pElementDelim:      ' | pElementDelim );\r\n  AsciiOutput( sDebugFile, '            pSkipCons:          ' | NumberToString( pSkipCons ) );\r\n  AsciiOutput( sDebugFile, '            pSkipRules:         ' | NumberToString( pSkipRules ) );\r\n  AsciiOutput( sDebugFile, '            pZeroSource:        ' | NumberToString( pZeroSource ) );\r\n  AsciiOutput( sDebugFile, '            pDestroyTempObj:     ' | NumberToString( pDestroyTempObj ) );\r\n  AsciiOutput( sDebugFile, '            pFilePath:          ' | pFilePath );\r\n  AsciiOutput( sDebugFile, '            pFileName:          ' | pFileName );\r\n  AsciiOutput( sDebugFile, '' );\r\n\r\n  AsciiOutput( sDebugFile, 'Temporary View Name : ' | cDefaultView );\r\n  AsciiOutput( sDebugFile, '' );\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\n# Validate cube\r\nIf(\r\nCubeExists( pCube ) = 0 );\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Invalid cube specified: ' | pCube;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n## Validate the View parameter\r\nIf( TRIM(pView) @= '' );\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Using default view: ' | cDefaultView;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  cView = cDefaultView ;\r\nElse ;\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Using view: ' | pView;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  cView = pView ;\r\nEndIf;\r\n\r\n# Validate file path\r\nIf(\r\nTrim( pFilePath ) @= '' );\r\n  pFilePath = GetProcessErrorFileDirectory;\r\nElse;\r\n  If(\r\n  SubSt( pFilePath, Long( pFilePath ), 1 ) @= '\\' );\r\n    pFilePath = SubSt( pFilePath, 1, Long( pFilePath ) -1 );\r\n  EndIf;\r\n  If(\r\n  FileExists( pFilePath ) = 0 );\r\n   If( pDebug >= 1 );\r\n     sMessage = 'Invalid export directory: ' | pFilePath;\r\n     AsciiOutput( sDebugFile, sMessage );\r\n   EndIf;\r\n   ProcessQuit;\r\n  EndIf;\r\n  pFilePath = pFilePath | '\\';\r\nEndIf;\r\n\r\n# Validate file name\r\nIf( pFileName @= '' );\r\n  pFileName = pCube | '_Export.csv';\r\nEndIf;\r\n\r\ncExportFile = pFilePath | pFileName;\r\nIf( pDebug >= 1 );\r\n  AsciiOutput( sDebugFile, 'Export file: ' | cExportFile );\r\nEndIf;\r\n\r\n\r\n### Determine number of dims in source cube & check that version dimension exists in cube ###\r\nnCount = 1;\r\nnDimensionIndex = 0;\r\nWhile( TabDim( pCube, nCount ) @<> '' );\r\n  sDimension = TabDim( pCube, nCount );\r\n  nCount = nCount + 1;\r\nEnd;\r\nnDimensionCount = nCount - 1;\r\n\r\nIf( nDimensionCount > 27 );\r\n  sMessage = 'Cube has too many dimensions: ' | pCube | '. Max of 27 dimensions.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\nIf( pDebug >= 1 );\r\n  sMessage = 'Number of dimensions in the cube: ' | pCube | ': ' | NumberToString( nDimensionCount );\r\n  AsciiOutput( sDebugFile, sMessage );\r\nEndIf;\r\n\r\n### Create Processing View for source version ###\r\nIf( pDebug <= 1 );\r\nnRet = ExecuteProcess('Bedrock.Cube.View.Create',\r\n  'pCube', pCube,\r\n  'pView', cView,\r\n  'pFilter', pFilter,\r\n  'pSuppressZero', 1,\r\n  'pSuppressConsol', pSkipCons,\r\n  'pSuppressRules', pSkipRules,\r\n  'pDimensionDelim', pDimensionDelim,\r\n  'pElementStartDelim', pElementStartDelim,\r\n  'pElementDelim', pElementDelim,\r\n  'pDebug', pDebug);\r\n\r\n  IF(\r\n  nRet <> 0);\r\n    If( pDebug >= 1 );\r\n      sMessage = 'Error creating the view from the filter.';\r\n      AsciiOutput(sDebugFile, sMessage);\r\n    ENDIF;\r\n    ProcessQuit;\r\n  ENDIF;\r\nENDIF;\r\n\r\n## Determine dimensions in source cube\r\nsDim1 = TabDim( pCube, 1 );\r\nsDim2 = TabDim( pCube, 2 );\r\nsDim3 = TabDim( pCube, 3 );\r\nsDim4 = TabDim( pCube, 4 );\r\nsDim5 = TabDim( pCube, 5 );\r\nsDim6 = TabDim( pCube, 6 );\r\nsDim7 = TabDim( pCube, 7 );\r\nsDim8 = TabDim( pCube, 8 );\r\nsDim9 = TabDim( pCube, 9 );\r\nsDim10 = TabDim( pCube, 10 );\r\nsDim11 = TabDim( pCube, 11 );\r\nsDim12 = TabDim( pCube, 12 );\r\nsDim13 = TabDim( pCube, 13 );\r\nsDim14 = TabDim( pCube, 14 );\r\nsDim15 = TabDim( pCube, 15 );\r\nsDim16 = TabDim( pCube, 16 );\r\nsDim17 = TabDim( pCube, 17 );\r\nsDim18 = TabDim( pCube, 18 );\r\nsDim19 = TabDim( pCube, 19 );\r\nsDim20 = TabDim( pCube, 20 );\r\nsDim21 = TabDim( pCube, 21 );\r\nsDim22 = TabDim( pCube, 22 );\r\nsDim23 = TabDim( pCube, 23 );\r\nsDim24 = TabDim( pCube, 24 );\r\nsDim25 = TabDim( pCube, 25 );\r\nsDim26 = TabDim( pCube, 26 );\r\nsDim27 = TabDim( pCube, 27 );\r\n\r\n### Assign Datasource ###\r\nIf( pDebug >= 2 );\r\n  ProcessBreak;\r\nELSE;\r\n  DataSourceType = 'VIEW';\r\n  DatasourceNameForServer = pCube;\r\n  DatasourceNameForClient = pCube;\r\n  DatasourceCubeView = cView;\r\nENDIF;\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"view": "Temp", "dataSourceNameForServer": "Bedrock Test", "dataSourceNameForClient": "Bedrock Test", "Type": "TM1CubeView"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\nEndIf;\r\n\r\n\r\n### Delete source data ###\r\nIf(\r\npDebug <= 1 &\r\npZeroSource = 1 );\r\n\r\n  ViewZeroOut( pCube, cView );\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Source Data has been zero out.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  Endif;\r\nELSE;\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Source Data has been retained.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  Endif;\r\nEndIf;\r\n\r\n### Destroy temporary views and susbsets ###\r\nIf( pDebug <= 1 );\r\n  ExecuteProcess('Bedrock.Cube.ViewAndSubsets.Delete',\r\n    'pCube', pCube,\r\n    'pView', cView,\r\n    'pSubset', cView,\r\n    'pMode', pDestroyTempObj,\r\n    'pDebug', pDebug);\r\nENDIF;\r\n\r\n### Finalise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Record Exported : ' | NumberToString( nDataCount) );\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f"]}