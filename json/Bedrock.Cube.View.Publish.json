{"Parameters": [{"Prompt": "Client Name", "Type": "String", "Value": "", "Name": "pClient"}, {"Prompt": "Cube Name", "Type": "String", "Value": "", "Name": "pCube"}, {"Prompt": "Private View Name", "Type": "String", "Value": "", "Name": "pView"}, {"Prompt": "Publish Private Subsets? (Boolean 1=Yes)", "Type": "Numeric", "Value": 1, "Name": "pSubPublish"}, {"Prompt": "Overwrite Existing Named View? (Boolean 1=Yes)", "Type": "Numeric", "Value": 0, "Name": "pOverwrite"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.View.Publish", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process converts a private view to a public view for the named client.\r\n# If the view contains private subsets they must also be made public or the\r\n# view publish will fail.\r\n\r\n# Note:\r\n# - This process must be run by the user publishing the private view, it canot be run by another user\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.View.Publish';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pClient     : ' | pClient );\r\n  AsciiOutput( sDebugFile, '            pCube       : ' | pCube );\r\n  AsciiOutput( sDebugFile, '            pView       : ' | pView );\r\n  AsciiOutput( sDebugFile, '            pSubPublish : ' | NumberToString( pSubPublish ) );\r\n  AsciiOutput( sDebugFile, '            pOverwrite  : ' | NumberToString( pOverwrite ) );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate Client\r\nIf( Trim( pClient ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No client specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\nIf( DimIx( '}Clients', pClient ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Client ' | pClient | ' does not exist on server';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Check that client running process is same as parameter\r\nsClient = TM1User( );\r\nIf( sClient @<> pClient );\r\n  nErrors = 1;\r\n  sMessage = 'Cannot continue, process must be executed by the view owner ( ' | pClient | ' )';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate Cube\r\nIf( Trim( pCube ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No cube specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\nIf( CubeExists( pCube ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Cube ' | pCube | ' does not exist on server';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate view\r\nIf( Trim( pView ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No view specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# No way to check if private view exists except via file system.\r\n# Could include data directory param and concatenate with user, cube and view to check\r\n# if private view exists to handle error inthe case that private view does not exist\r\n\r\n# Check for valid view name, subset publish and overwrite parameters\r\nIf( pSubPublish <> 0 & pSubPublish <> 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid publish private subsets selection: ' | NumberToString( pSubPublish );\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\nIf( pOverwrite <> 0 & pOverwrite <> 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid overwrite existing public view selection: ' | NumberToString( pOverwrite );\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\nIf( pOverwrite = 0 & ViewExists( pCube, pView ) = 1 );\r\n  # If NOT overwriting current public view AND view of the same name exists then cause minor error ( major error if not handled )\r\n  nErrors = 1;\r\n  sMessage = 'Public view of same name already exists and Overwrite=No specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n\r\n### Publish the view ( and any private subsets ) ###\r\n\r\nIf( pDebug <= 1 );\r\n  PublishView( pCube, pView, pSubPublish, pOverwrite );\r\nEndIf;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}