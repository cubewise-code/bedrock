{"Parameters": [{"Prompt": "Dimension", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "Subset", "Type": "String", "Value": "", "Name": "pSubset"}, {"Prompt": "Boolean: 1 = Convert to Static Subset", "Type": "Numeric", "Value": 1, "Name": "pConvertToStatic"}, {"Prompt": "Set Alias for Subset", "Type": "String", "Value": "", "Name": "pAlias"}, {"Prompt": "pDebug", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Sub.Create.TopLevelHierarchy", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will Create a Top Level Hiearchy by N-Level Elements\r\n# that is a subset of all \"top node\" elements ( Consolidated elements that have no parents )\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Sub.Create.TopLevelHierarchy';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pDimension       : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pSubset          : ' | pSubset );\r\n  AsciiOutput( sDebugFile, '            pConvertToStatic : ' | NumberToString( pConvertToStatic ) );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate dimension\r\nIf( Trim( pDimension ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No dimension specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( DimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\nIf( DnLev( pDimension ) <= 1 );\r\n  # Create by MDX would return empty set and fail so need to abort here\r\n  nErrors = 1;\r\n  sMessage = 'Cannot continue dimension is flat: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIF;\r\n\r\n# Validate subset\r\nIf( Trim( pSubset ) @= '' );\r\n  pSubset = 'Top Level Hierarchies';\r\nEndIf;\r\n\r\n## Validate Alias\r\nsDimAttr = '}ElementAttributes_' | pDimension;\r\nIF(\r\npAlias @<> '' );\r\n  IF(\r\n  DimensionExists( sDimAttr ) = 0 );\r\n    sMessage = 'No attributes exist for the dimension: ' | pDimension;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(\r\n  DIMIX( sDimAttr, pAlias ) = 0 );\r\n    sMessage = 'The Alias: ' | pAlias | ' does not exist in the dimension: ' | pDimension;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  EndIf;\r\n\r\n  IF(\r\n  DTYPE( sDimAttr, pAlias ) @<> 'AA' );\r\n    sMessage = 'The Alias: ' | pAlias | ' is not an Alias in the dimension: ' | sDimAttr;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    pAlias = '';\r\n  EndIf;\r\nENDIF;\r\n\r\n\r\n### MDX for creating subset ###\r\n\r\nsMDX = '{EXCEPT( {FILTER( {TM1SUBSETALL( [' | pDimension | '] )}, MemberToStr( [' |\r\n       pDimension | '].CurrentMember.Parent ) = \"\" )},' |\r\n       '{TM1FILTERBYLEVEL( {TM1SUBSETALL( [' | pDimension | '] )},0 )} )}';\r\n\r\n\r\n### Create Subset ###\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  # For a dynamic subset, the original subset MUST be destroyed first or the MDX will fail\r\n  If( pConvertToStatic = 0 );\r\n    If( SubsetExists( pDimension, pSubset ) = 1 );\r\n      SubsetDestroy( pDimension, pSubset );\r\n    EndIf;\r\n    SubsetCreateByMDX( pSubset, sMDX );\r\n\r\n  # For a static subset the subset does not need to be destroyed but its elements need to be deleted first\r\n  Else;\r\n    If( SubsetExists( pDimension, pSubset ) = 1 );\r\n      SubsetDeleteAllElements( pDimension, pSubset );\r\n    Else;\r\n      SubsetCreate( pDimension, pSubset );\r\n    EndIf;\r\n\r\n    # Create a temporary MDX subset for processing\r\n    sSubsetMDX = '}' | cProcess |'.' | NumberToString( Int( Rand() * 100000 ) );\r\n    # It is unlikely that the subset already exists due to the random number in the subset name\r\n    # However, it the SubsetDestroy is included in case the same random number is generated\r\n    If( SubsetExists( pDimension, sSubsetMDX ) = 1 );\r\n      SubsetDestroy( pDimension, sSubsetMDX );\r\n    EndIf;\r\n    SubsetCreateByMDX( sSubsetMDX, sMDX );\r\n\r\n    # Transfer the elements from the MDX subset to the static subset\r\n    nSubsetSize = SubsetGetSize( pDimension, sSubsetMDX );\r\n    nSubsetIndex = 0;\r\n    While( nSubsetIndex < nSubsetSize );\r\n      nSubsetIndex = nSubsetIndex + 1;\r\n      sElement = SubsetGetElementName( pDimension, sSubsetMDX, nSubsetIndex );\r\n      SubsetElementInsert( pDimension, pSubset, sElement, nSubsetIndex );\r\n    End;\r\n\r\n    If( pDebug = 1 );\r\n      AsciiOutput( sDebugFile, pSubset | ' Size: ', NumberToString( SubSetGetSize( pDimension, pSubset ) ) );\r\n    EndIf;\r\n\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n### Set Alias ##\r\nIF(\r\npAlias @<> '' );\r\n  If( pDebug <= 1 );\r\n    SubsetAliasSet( pDimension, pSubset, pAlias );\r\n  EndIf;\r\n\r\n  If( pDebug >= 1 );\r\n    sMessage = 'The Alias: ' | pAlias | ' has been set.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\nENDIF;\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}