{"Parameters": [{"Prompt": "Groups seperated by delimiter", "Type": "String", "Value": "", "Name": "pGroups"}, {"Prompt": "Delimiter character", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Security.Group.Delete", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will delete client groups\r\n\r\n# Notes:\r\n# - Multiple groups can be specified seperated by a delimiter\r\n# - If group does not exist then it will be skipped.\r\n# - If multiple groups are specified and some don't exist and some do, then the ones that do exist will still be deleted\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Security.Group.Delete';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pGroups: ' | pGroups );\r\n  AsciiOutput( sDebugFile, '            pDelimiter: ' | pDelimiter );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\n# If blank delimiter specified then convert to default\r\nIf( pDelimiter @= '' );\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n# If no groups have been specified then terminate process\r\nIf( Trim( pGroups ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No groups specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n\r\n### Split pGroups into individual groups and delete ###\r\n\r\nsGroups = pGroups;\r\nnDelimiterIndex = 1;\r\n\r\nWhile( nDelimiterIndex <> 0 );\r\n  nDelimiterIndex = Scan( pDelimiter, sGroups );\r\n  If( nDelimiterIndex = 0 );\r\n    sGroup = sGroups;\r\n  Else;\r\n    sGroup = Trim( SubSt( sGroups, 1, nDelimiterIndex - 1 ) );\r\n    sGroups = Trim( Subst( sGroups, nDelimiterIndex + Long(pDelimiter), Long( sGroups ) ) );\r\n  EndIf;\r\n  # Don't attempt to delete a blank group\r\n  If( sGroup @<> '' );\r\n    If( DimIx( '}Groups', sGroup ) <> 0 );\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Group: ' | sGroup | ' OK' );\r\n      EndIf;\r\n      If( pDebug <= 1 );\r\n        DeleteGroup( sGroup );\r\n      EndIf;\r\n    Else;\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'Group: ' | sGroup | ' does not exist' );\r\n      EndIf;\r\n    EndIf;\r\n  EndIf;\r\nEnd;\r\n\r\nIf( pDebug <= 1 );\r\n  DimensionSortOrder( '}Groups', 'ByName', 'Ascending', 'ByName' , 'Ascending' );\r\nEndIf;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}