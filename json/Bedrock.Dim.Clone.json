{"Parameters": [{"Prompt": "Source Dimension", "Type": "String", "Value": "", "Name": "pSourceDim"}, {"Prompt": "Target Dimension", "Type": "String", "Value": "", "Name": "pTargetDim"}, {"Prompt": "Include Attributes? (Boolean 1=True)", "Type": "Numeric", "Value": 0, "Name": "pAttr"}, {"Prompt": "0 = Delete all Elements, 1 = Unwind Existing Elements", "Type": "Numeric", "Value": 0, "Name": "pUnwind"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 1.0.0~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for errors in prolog ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\n### Replicate Attributes ###\r\n\r\n# Note: DTYPE on Attr dim returns \"AS\", \"AN\" or \"AA\" need to strip off leading \"A\"\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  If( pAttr = 1 & DimensionExists( sAttrDim ) = 1 );\r\n\r\n    nCount = 1;\r\n    While( nCount <= nNumAttrs );\r\n      sAttrName = DimNm( sAttrDim, nCount );\r\n      sAttrType = SubSt( DTYPE( sAttrDim, sAttrName ), 2, 1 );\r\n      If( sAttrType @= 'S' % sAttrType @= 'A' );\r\n        sAttrVal = AttrS( pSourceDim, vElement, sAttrName );\r\n        If( sAttrVal @<> '' );\r\n          AttrPutS( sAttrVal, pTargetDim, vElement, sAttrName );\r\n        EndIf;\r\n      Else;\r\n        nAttrVal = AttrN( pSourceDim, vElement, sAttrName );\r\n        If( nAttrVal <> 0 );\r\n          AttrPutN( nAttrVal, pTargetDim, vElement, sAttrName );\r\n        EndIf;\r\n      EndIf;\r\n      nCount = nCount + 1;\r\n    End;\r\n\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n\r\n### End Data ###", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "vElement"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Dim.Clone", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 1.0.0~~##\r\n#####################################################################################\r\n\r\n# This process will clone the source dimension\r\n# If the target dimension already exists then it will be overwritten\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Dim.Clone' ;\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.';\r\ncSubset = cProcess;\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pSourceDim : ' | pSourceDim );\r\n  AsciiOutput( sDebugFile, '            pTargetDim : ' | pTargetDim );\r\n  AsciiOutput( sDebugFile, '            pUnwind    : ' | NumberToString( pUnwind ) );\r\n  AsciiOutput( sDebugFile, '            pAttr      : ' | NumberToString( pAttr ) );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate source dimension\r\nIf ( DimensionExists( pSourceDim ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source dimension: ' | pSourceDim;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n# Validate target dimension\r\nIf( \r\npTargetDim @= '' % pTargetDim @= pSourceDim );\r\n  pTargetDim = pSourceDim | '_Clone';\r\nEndIf;\r\n\r\n\r\n\r\n### Create target dimension ###\r\nIf( pDebug <= 1 );\r\n  If( \r\n  DimensionExists( pTargetDim ) = 0 );\r\n    DimensionCreate( pTargetDim );\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, 'Target dimension created: ' | pTargetDim  );\r\n    EndIf;\r\n\r\n  Else;\r\n    IF(\r\n    pUnwind = 1 );\r\n      ExecuteProcess( 'Bedrock.Dim.Hierarchy.Unwind.All',\r\n        'pDimension', pTargetDim,\r\n        'pDebug', pDebug\r\n        );\r\n       If( pDebug >= 1 );\r\n         AsciiOutput( sDebugFile, 'Target dimension unwound: ' | pTargetDim  );\r\n       EndIf;\r\n\r\n    ELSE;\r\n      DimensionDeleteAllElements( pTargetDim );\r\n      If( pDebug >= 1 );\r\n        AsciiOutput( sDebugFile, 'All element deleted from Target element: ' | pTargetDim  );\r\n      EndIf;\r\n\r\n    EndIf;\r\n  EndIf;\r\nEndIf;\r\n\r\n### Set the target Sort Order ###\r\nsSortElementsType = CELLGETS( '}DimensionProperties', pSourceDim, 'SORTELEMENTSTYPE');\r\nsSortElementsSense  = CELLGETS( '}DimensionProperties', pSourceDim, 'SORTELEMENTSSENSE');\r\nsSortComponentsType = CELLGETS( '}DimensionProperties', pSourceDim, 'SORTCOMPONENTSTYPE');\r\nsSortComponentsSense = CELLGETS( '}DimensionProperties', pSourceDim, 'SORTCOMPONENTSSENSE');\r\n\r\nIf( pDebug <= 1 );\r\n  DimensionSortOrder( pTargetDim, sSortComponentsType, sSortComponentsSense, sSortElementsType , sSortElementsSense);\r\nEndIf;\r\n\r\nIf( pDebug >= 1 );\r\n  AsciiOutput( sDebugFile, 'Dimension Sort: Sort Components Type : ' | sSortComponentsType );\r\n  AsciiOutput( sDebugFile, '                Sort Components Sense: ' | sSortComponentsSense );\r\n  AsciiOutput( sDebugFile, '                Sort Elements Type   : ' | sSortElementsType );\r\n  AsciiOutput( sDebugFile, '                Sort Elements Sense  : ' | sSortElementsSense );\r\nEndIf;\r\n\r\n### Build Source Subset ###\r\nIf( SubsetExists( pSourceDim, cSubset ) = 1 );\r\n  SubsetDeleteAllElements( pSourceDim, cSubset );\r\nElse;\r\n  SubsetCreate( pSourceDim, cSubset );\r\nEndIf;\r\nSubsetIsAllSet( pSourceDim, cSubset, 1 );\r\n\r\n\r\nnSourceDimSize = DIMSIZ( pSourceDim );\r\nnIndex = 1;\r\nWHILE( nIndex <= nSourceDimSize );\r\n  sElName = DIMNM( pSourceDim, nIndex);\r\n  sElType = DTYPE( pSourceDim, sElName);\r\n  \r\n  If( pDebug <= 1 );\r\n    DimensionElementInsert( pTargetDim, '', sElName, sElType );\r\n  ENDIF;\r\n  nIndex = nIndex + 1;\r\nEND;\r\n\r\n### Assign Data Source ###\r\n\r\nDatasourceNameForServer = pSourceDim;\r\nDatasourceNameForClient = pSourceDim;\r\nDataSourceType = 'SUBSET';\r\nDatasourceDimensionSubset = cSubset;\r\n\r\n\r\n### Replicate Attributes ###\r\n\r\n# Note: DType on Attr dim returns \"AS\", \"AN\" or \"AA\" need to strip off leading \"A\"\r\n\r\nsAttrDim = '}ElementAttributes_' | pSourceDim;\r\nIf( pAttr = 1 & DimensionExists( sAttrDim ) = 1 );\r\n  nNumAttrs = DimSiz( sAttrDim );\r\n  nCount = 1;\r\n  While( nCount <= nNumAttrs );\r\n    sAttrName = DimNm( sAttrDim, nCount );\r\n    sAttrType = SubSt(DType( sAttrDim, sAttrName ), 2, 1 );\r\n      If( pDebug <= 1 );\r\n        AttrInsert( pTargetDim, '', sAttrName, sAttrType );\r\n      EndIf;\r\n    nCount = nCount + 1;\r\n  End;\r\nEndIf;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 1.0.0~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for errors in prolog ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n\r\n\r\n### Add Elements to target dimension ###\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  sElType = DType( pSourceDim, vElement );\r\n\r\n  IF( \r\n  sElType @= 'C' & \r\n  ElCompN( pSourceDim, vElement ) > 0 );\r\n    nChildren = ElCompN( pSourceDim, vElement );\r\n    nCount = 1;\r\n    While( nCount <= nChildren );\r\n      sChildElement = ElComp( pSourceDim, vElement, nCount );\r\n      sChildWeight = ElWeight( pSourceDim, vElement, sChildElement );\r\n      DimensionElementComponentAdd( pTargetDim, vElement, sChildElement, sChildWeight );\r\n      nCount = nCount + 1;\r\n    End;\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n\r\n### End MetaData ###", "DataSource": {"dataSourceNameForServer": "}Cubes", "dataSourceNameForClient": "}Cubes", "Type": "TM1DimensionSubset", "subset": "All"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 1.0.0~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n### Destroy Source Subset ###\r\nIf( pDebug <= 1 );\r\n  If(\r\n  SubsetExists( pSourceDim, cSubset ) = 1 );\r\n    SubsetDestroy( pSourceDim, cSubset );\r\n  EndIf;\r\nENDIF;\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n### Set the target Sort Order ###\r\nIf( pDebug >= 1 );\r\n  CELLPUTS( sSortElementsType, '}DimensionProperties', pTargetDim, 'SORTELEMENTSTYPE');\r\n  CELLPUTS( sSortElementsSense, '}DimensionProperties', pTargetDim, 'SORTELEMENTSSENSE');\r\n  CELLPUTS( sSortComponentsType, '}DimensionProperties', pTargetDim, 'SORTCOMPONENTSTYPE');\r\n  CELLPUTS( sSortComponentsSense, '}DimensionProperties', pTargetDim, 'SORTCOMPONENTSSENSE');\r\nENDIF;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f"]}