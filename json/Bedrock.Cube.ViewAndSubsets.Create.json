{"Parameters": [{"Prompt": "Cube", "Type": "String", "Value": "", "Name": "pCube"}, {"Prompt": "Suppress Zeros (Boolean Yes = 1)", "Type": "Numeric", "Value": 1, "Name": "pSuppressZero"}, {"Prompt": "Suppress Calcs (Boolean Yes = 1)", "Type": "Numeric", "Value": 1, "Name": "pSuppressConsol"}, {"Prompt": "Suppress Rules (Boolean Yes = 1)", "Type": "Numeric", "Value": 1, "Name": "pSuppressRules"}, {"Prompt": "Dimension(s) to create empty processing subsets for", "Type": "String", "Value": "", "Name": "pDimensions"}, {"Prompt": "Delimiter", "Type": "String", "Value": "&", "Name": "pDelimiter"}, {"Prompt": "View", "Type": "String", "Value": "", "Name": "pView"}, {"Prompt": "Subset", "Type": "String", "Value": "", "Name": "pSubset"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "Variables": [], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.ViewAndSubsets.Create", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process creates a processing view for the cube and for specified dimensions of the cube\r\n# It creates empty subsets and assigns the empty subsets to the view.\r\n\r\n# Note:\r\n# - A subsequent process is required to insert elements into subsets otherwise the\r\n#   views will not contain any data!\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.ViewAndSubsets.Create' ;\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pCube           : ' | pCube );\r\n  AsciiOutput( sDebugFile, '            pSuppressZero   : ' | NumberToString( pSuppressZero ) );\r\n  AsciiOutput( sDebugFile, '            pSuppressConsol : ' | NumberToString( pSuppressConsol ) );\r\n  AsciiOutput( sDebugFile, '            pSuppressRules  : ' | NumberToString( pSuppressRules ) );\r\n  AsciiOutput( sDebugFile, '            pDimensions     : ' | pDimensions );\r\n  AsciiOutput( sDebugFile, '            pDelimiter      : ' | pDelimiter );\r\n  AsciiOutput( sDebugFile, '            pView           : ' | pView );\r\n  AsciiOutput( sDebugFile, '            pSubset         : ' | pSubset );\r\n\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\nnErrors = 0;\r\n\r\n# Validate cube\r\nIf( Trim( pCube ) @= '' );\r\n  nErrors = 1;\r\n  sMessage = 'No cube specified';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\nIf( CubeExists( pCube ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Cube: ' | pCube | ' does not exist';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n# Validate suppression parameters\r\nIf( pSuppressZero <> 0 & pSuppressZero <> 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid value for suppress zero parameter';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\nIf( pSuppressConsol <> 0 & pSuppressConsol <> 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid value for suppress consol parameter';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\nIf( pSuppressRules <> 0 & pSuppressRules <> 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid value for suppress rules parameter';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n# Validate view and subsets\r\nIf( pView @= '' & pSubset @= '' );\r\n  ## Use standard view name.\r\n  cView = '}' | pCube;\r\n  cSubset = cView;\r\nElseIf( pView @<> '' & pSubset @= '' );\r\n  ## Use the nominated view name for the subset name.\r\n  cView = pView;\r\n  cSubset = pView;\r\nElseIf( pView @= '' & pSubset @<> '' );\r\n  ## Use the nominated subset name for the view name.\r\n  cView = pSubset;\r\n  cSubset = pSubset;\r\nElse;\r\n  cView = pView;\r\n  cSubset = pSubset;\r\nEndIf;\r\n\r\n# Validate delimiter\r\nIf( pDelimiter @= '' );\r\n  pDelimiter = '&';\r\nEndIf;\r\n\r\n### Build View ###\r\n\r\nIf( pDebug >= 1 );\r\n  AsciiOutput( sDebugFile, 'Cube: ' | pCube |', View: ' | cView | ', Subset: ' | cSubset );\r\nEndIf;\r\n\r\nIf( pDebug <= 1 );\r\n\r\n  If( ViewExists( pCube, cView ) = 1);\r\n    ViewDestroy( pCube, cView );\r\n  EndIf;\r\n  ViewCreate( pCube, cView );\r\n\r\n  ViewExtractSkipZeroesSet( pCube, cView, pSuppressZero );\r\n  ViewExtractSkipCalcsSet( pCube, cView, pSuppressConsol );\r\n  ViewExtractSkipRuleValuesSet( pCube, cView, pSuppressRules );\r\n\r\n  ### Build Subsets and assign to View ###\r\n\r\n  # Create subsets for all dimensions if pDimension is set to Every\r\n  If( Upper( Trim( pDimensions ) ) @= 'EVERY' );\r\n\r\n    # Create an empty subset in every dimension of the cube.\r\n    nDimensionIndex = 1;\r\n    sDimension = TabDim( pCube, nDimensionIndex );\r\n\r\n    While( sDimension @<> '' );\r\n      If( SubsetExists( sDimension, cSubset ) = 1 );\r\n        SubsetDeleteAllElements( sDimension, cSubset );\r\n      Else;\r\n        SubsetCreate( sDimension, cSubset );\r\n      EndIf;\r\n      ViewSubsetAssign( pCube, cView, sDimension, cSubset );\r\n\r\n      nDimensionIndex = nDimensionIndex + 1;\r\n      sDimension = TabDim( pCube, nDimensionIndex );\r\n    End;\r\n\r\n  # Create subsets for specified dimensions only\r\n  Else;\r\n\r\n    nDelimiterIndex = 1;\r\n    sDimensions = pDimensions;\r\n\r\n    While( nDelimiterIndex <> 0 & sDimensions @<> '' );\r\n      nDelimiterIndex = Scan( pDelimiter, sDimensions  );\r\n      If( nDelimiterIndex = 0 );\r\n        sDimension = sDimensions;\r\n      Else;\r\n        sDimension = Trim( SubSt( sDimensions, 1, nDelimiterIndex - 1 ) );\r\n        sDimensions = Trim( SubSt( sDimensions, nDelimiterIndex + Long( pDelimiter ), Long( sDimensions ) ) );\r\n      EndIf;\r\n\r\n      If( DimensionExists( sDimension ) = 1 );\r\n        If( SubsetExists ( sDimension, cSubset ) = 1 );\r\n          SubsetDeleteAllElements( sDimension, cSubset );\r\n        Else;\r\n          SubsetCreate( sDimension, cSubset );\r\n        EndIf;\r\n        ViewSubsetAssign( pCube, cView, sDimension, cSubset );\r\n      Else;\r\n        If( pDebug >= 1 );\r\n          AsciiOutput( sDebugFile, 'Dimension: ' | sDimension | ' does not exist, skipping' );\r\n        EndIf;\r\n      EndIf;\r\n    End;\r\n\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"Type": "None"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": []}