{"Parameters": [{"Prompt": "Unload rule from this cube.", "Type": "String", "Value": "", "Name": "pSourceCube"}, {"Prompt": "Optional: The name of the temporary rule file.", "Type": "String", "Value": "", "Name": "pRuleName"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n\r\n### OUTPUT BACKUP RULE FILE\r\n\r\nASCIIOUTPUT( cBkpRuleName, v1 );\r\n\r\n\r\n", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V1"}], "HasSecurityAccess": false, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.Rule.Unload", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.0~~##\r\n#####################################################################################\r\n\r\n## This process will copy the rule rule file to a temporary file and load a blank rule file.\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.Rule.Unload';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\ncBlankRuleName = 'BlankRuleFile.rux';\r\nnErrors = 0;\r\n\r\n### PROCESS PROPERTIES\r\nDatasourceASCIIDelimiter = '';\r\nDatasourceASCIIQuoteCharacter = '';\r\n\r\n### Initialise Debug ###\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters:    pSourceCube: ' | pSourceCube );\r\n  AsciiOutput( sDebugFile, '               pRuleName: ' | pRuleName );\r\n  AsciiOutput( sDebugFile, '' );\r\n\r\nEndIf;\r\n\r\n### VALIDATE PARAMETERS ###\r\n## Check if the cube exists.\r\nIF(\r\npSourceCube @= '' % \r\nCubeExists( pSourceCube ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source cube specified: ' | pSourceCube;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nELSE;\r\n  cSourceCube = pSourceCube;\r\nEndIf;\r\n\r\n## Check if a rule file exists.\r\ncCubeRuleFileName = cSourceCube | '.rux';\r\nIF(\r\nFileExists( cCubeRuleFileName ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'No Rule file found for cube: ' | cSourceCube;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## Set the Backup rule file name\r\nIF(\r\npRuleName @= '' );\r\n  cBkpRuleName = cSourceCube  | '_Bedrock.txt';\r\nELSE;\r\n    cBkpRuleName = pRuleName;\r\nENDIF;\r\nIF( pDebug >= 1 );\r\n  sMsg = 'Set backup rule filename: ' | cBkpRuleName | '.';\r\n  AsciiOutput( sDebugFile, sMessage );\r\nENDIF;\r\n\r\n## Delete old Backup files\r\nIF(\r\nFileExists( cBkpRuleName ) = 0 );\r\n  ASCIIDelete( cBkpRuleName );\r\nENDIF;\r\n\r\n### BLANK RULE FILE ###\r\n## Check if the rule file \r\nIF(\r\nFileExists( cBlankRuleName ) = 0 );\r\n  If( pDebug <= 1 );\r\n    ASCIIOUTPUT( cBlankRuleName, 'SKIPCHECK;' );\r\n    ASCIIOUTPUT( cBlankRuleName, '' );\r\n    ASCIIOUTPUT( cBlankRuleName, 'FEEDERS;' );\r\n  EndIf;\r\n\r\n  If( pDebug >= 1 );\r\n    sMsg =  'No Blank Rule file. Create Blank Rule file ' | cBlankRuleName | '.';\r\n    ASCIIOUTPUT( cDebugFile, sMsg );\r\n  EndIf;\r\n\r\nENDIF;\r\n\r\n### SET DATA SOURCE ###\r\n\r\n\r\n\r\nDatasourceType = 'CHARACTERDELIMITED';\r\nDatasourceNameForServer =cCubeRuleFileName;", "MetadataProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****", "DataSource": {"asciiQuoteCharacter": "\"", "asciiDelimiterChar": ",", "dataSourceNameForServer": "C:\\TM1Data\\Bedrock3\\Data\\Excel.RUX", "dataSourceNameForClient": "C:\\TM1Data\\Bedrock3\\Data\\Excel.RUX", "asciiHeaderRecords": 0, "asciiThousandSeparator": ",", "asciiDelimiterType": "Character", "Type": "ASCII", "asciiDecimalSeparator": "."}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n### Initialise Debug ###\r\nIf( pDebug >= 1 );\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\nEndIf;\r\n\r\n\r\n### LOAD BLANK RULE FILE ###\r\nIF( pDebug >= 1 );\r\n  sMsg = 'Load Blank Rule file.';\r\n  AsciiOutput( sDebugFile, sMsg );\r\nENDIF;\r\n\r\nIF( pDebug <= 1 );\r\n  RuleLoadFromFile( cSourceCube, cBlankRuleName );\r\nENDIF;\r\n\r\n### Finalise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n  ## Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  ## Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n## If errors occurred terminate process with a major error status ###\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f"]}