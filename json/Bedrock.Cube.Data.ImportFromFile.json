{"Parameters": [{"Prompt": "Source Directory", "Type": "String", "Value": "", "Name": "pSourceDir"}, {"Prompt": "Source File", "Type": "String", "Value": "", "Name": "pSourceFile"}, {"Prompt": "Target Cube", "Type": "String", "Value": "", "Name": "pCube"}, {"Prompt": "Dimension (Optional)", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "Source Element ( Only required if a Dimensoin is used.)", "Type": "String", "Value": "", "Name": "pSourceElement"}, {"Prompt": "Target Element (Only required if Dimension is used.)", "Type": "String", "Value": "", "Name": "pTargetElement"}, {"Prompt": "Number of Title Rows to Skip", "Type": "Numeric", "Value": 1, "Name": "pTitleRows"}, {"Prompt": "Delimiter Character (default=Comma)", "Type": "String", "Value": ",", "Name": "pDelimiter"}, {"Prompt": "Quote Character (default=Double Quote)", "Type": "String", "Value": "\"", "Name": "pQuote"}, {"Prompt": "Accumulate Amounts", "Type": "Numeric", "Value": 0, "Name": "pCumulate"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# It would be too exhaustive to error trap elements not existing in dimension for each possible number of dimensions\r\n# If an incorrect source file is specfied for a target cube then the TI will error with standard TI error messages.\r\n# Note: that the assumed file format is standard .cma cube export of Cube, d1, d2, dn, value\r\n# This is equivalent to using the Bedrock.Cube.ExportToFile TI.\r\n\r\n\r\n## Increase Record count\r\nnRecordProcessedCount = nRecordProcessedCount + 1;\r\n\r\n\r\n### Determine target dimension SubStitution ###\r\nIF( pDimension @<>'');\r\n\r\n  If( nDimensionIndex = 1 );\r\n    IF( v2 @= sSourceElement );\r\n      v2 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 2 );\r\n    IF( v3 @= sSourceElement );\r\n      v3 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 3 );\r\n    IF( v4 @= sSourceElement );\r\n      v4 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 4 );\r\n     IF( v5 @= sSourceElement );\r\n      v5 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 5 );\r\n    IF( v6 @= sSourceElement );\r\n      v6 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 6 );\r\n    IF( v7 @= sSourceElement );\r\n      v7 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 7 );\r\n    IF( v8 @= sSourceElement );\r\n      v8 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 8 );\r\n    IF( v9 @= sSourceElement );\r\n      v9 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 9 );\r\n    IF( v10 @= sSourceElement );\r\n      v10 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 10 );\r\n    IF( v11 @= sSourceElement );\r\n      v11 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 11 );\r\n    IF( v12 @= sSourceElement );\r\n      v12 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 12 );\r\n    IF( v13 @= sSourceElement );\r\n      v13 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 13 );\r\n    IF( v14 @= sSourceElement );\r\n      v14 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 14 );\r\n    IF( v15 @= sSourceElement );\r\n      v15 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 15 );\r\n    IF( v16 @= sSourceElement );\r\n      v16 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 16 );\r\n    IF( v17 @= sSourceElement );\r\n      v17 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 17 );\r\n    IF( v18 @= sSourceElement );\r\n      v18 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 18 );\r\n    IF( v19 @= sSourceElement );\r\n      v19 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 19 );\r\n    IF( v20 @= sSourceElement );\r\n      v20 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 20 );\r\n    IF( v21 @= sSourceElement );\r\n      v21 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 21 );\r\n    IF( v22 @= sSourceElement );\r\n      v22 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 22 );\r\n    IF( v23 @= sSourceElement );\r\n      v23 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 23 );\r\n    IF( v24 @= sSourceElement );\r\n      v24 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 24 );\r\n    IF( v25 @= sSourceElement );\r\n      v25 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 25 );\r\n    IF( v26 @= sSourceElement );\r\n      v26 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 26 );\r\n    IF( v27 @= sSourceElement );\r\n      v27 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n  ElseIf( nDimensionIndex = 27 );\r\n    IF( v28 @= sSourceElement );\r\n      v27 = pTargetElement;\r\n    ELSE;\r\n      ITEMSKIP;\r\n    ENDIF;\r\n\r\n  EndIf;\r\nENDIF;\r\n\r\n### Write data from source file to target cube ###\r\nIf( pDebug <= 1 );\r\n  If( nDimensionCount = 2 );\r\n    If( CellIsUpdateable( pCube, v2, v3 ) = 1 );\r\n      sElType = DType( sDim2, v3 );\r\n      IF( sElType @= 'AS' % sElType @= 'AA');\r\n        ATTRPUTS( v4, pCube, v2, v3 );\r\n      ELSEIF( sElType @= 'AN' );\r\n        ATTRPUTN( Numbr( v4), pCube, v2, v3 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v4, pCube, v2, v3 );\r\n      Else;\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3 );\r\n          nCbal = nObal + Numbr( v4 );\r\n        ELSE;\r\n          nCbal = Numbr( v4 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 3 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4 ) = 1 );\r\n      sElType = DType( sDim3, v4 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4 );\r\n          nCbal = nObal + Numbr( v5 );\r\n        ELSE;\r\n          nCbal = Numbr( v5 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4 );\r\n      Else;\r\n        CellPutS( v5, pCube, v2, v3, v4 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 4 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5 ) = 1 );\r\n      sElType = DType( sDim4, v5 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5 );\r\n          nCbal = nObal + Numbr( v6 );\r\n        ELSE;\r\n          nCbal = Numbr( v6 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5 );\r\n      Else;\r\n        CellPutS( v6, pCube, v2, v3, v4, v5 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 5 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6 ) = 1 );\r\n      sElType = DType( sDim5, v6 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6 );\r\n          nCbal = nObal + Numbr( v7 );\r\n        ELSE;\r\n          nCbal = Numbr( v7 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6 );\r\n      Else;\r\n        CellPutS( v7, pCube, v2, v3, v4, v5, v6 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 6 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7 ) = 1 );\r\n      sElType = DType( sDim6, v7 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7 );\r\n          nCbal = nObal + Numbr( v8 );\r\n        ELSE;\r\n          nCbal = Numbr( v8 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7 );\r\n      Else;\r\n        CellPutS( v8, pCube, v2, v3, v4, v5, v6, v7 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 7 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8 ) = 1 );\r\n      sElType = DType( sDim7, v8 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8 );\r\n          nCbal = nObal + Numbr( v9 );\r\n        ELSE;\r\n          nCbal = Numbr( v9 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8 );\r\n      Else;\r\n        CellPutS( v9, pCube, v2, v3, v4, v5, v6, v7, v8 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 8 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9 ) = 1 );\r\n      sElType = DType( sDim8, v9 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n          nCbal = nObal + Numbr( v10 );\r\n        ELSE;\r\n          nCbal = Numbr( v10 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n      Else;\r\n        CellPutS( v10, pCube, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 9 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 ) = 1 );\r\n      sElType = DType( sDim9, v10 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n          nCbal = nObal + Numbr( v11 );\r\n        ELSE;\r\n          nCbal = Numbr( v11 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n      Else;\r\n        CellPutS( v11, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 10 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 ) = 1 );\r\n      sElType = DType( sDim10, v11 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n          nCbal = nObal + Numbr( v12 );\r\n        ELSE;\r\n          nCbal = Numbr( v12 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n      Else;\r\n        CellPutS( v12, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 11 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 ) = 1 );\r\n      sElType = DType( sDim11, v12 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n          nCbal = nObal + Numbr( v13 );\r\n        ELSE;\r\n          nCbal = Numbr( v13 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n      Else;\r\n        CellPutS( v13, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 12 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 ) = 1 );\r\n      sElType = DType( sDim12, v13 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n          nCbal = nObal + Numbr( v14 );\r\n        ELSE;\r\n          nCbal = Numbr( v14 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n      Else;\r\n        CellPutS( v14, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 13 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 ) = 1 );\r\n      sElType = DType( sDim13, v14 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n          nCbal = nObal + Numbr( v15 );\r\n        ELSE;\r\n          nCbal = Numbr( v15 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n      Else;\r\n        CellPutS( v15, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 14 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 ) = 1 );\r\n      sElType = DType( sDim14, v15 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n          nCbal = nObal + Numbr( v16 );\r\n        ELSE;\r\n          nCbal = Numbr( v16 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n      Else;\r\n        CellPutS( v16, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 15 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 ) = 1 );\r\n      sElType = DType( sDim15, v16 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n          nCbal = nObal + Numbr( v17 );\r\n        ELSE;\r\n          nCbal = Numbr( v17 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n      Else;\r\n        CellPutS( v17, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 16 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 ) = 1 );\r\n      sElType = DType( sDim16, v17 );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n          nCbal = nObal + Numbr( v18 );\r\n        ELSE;\r\n          nCbal = Numbr( v18 );\r\n        Endif;\r\n      If( sElType @<> 'S' );\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n      Else;\r\n        CellPutS( v18, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 17 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 ) = 1 );\r\n      sElType = DType( sDim17, v18 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n          nCbal = nObal + Numbr( v19 );\r\n        ELSE;\r\n          nCbal = Numbr( v19 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n      Else;\r\n        CellPutS( v19, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 18 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 ) = 1 );\r\n      sElType = DType( sDim18, v19 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n          nCbal = nObal + Numbr( v20 );\r\n        ELSE;\r\n          nCbal = Numbr( v20 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n      Else;\r\n        CellPutS( v20, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 19 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 ) = 1 );\r\n      sElType = DType( sDim19, v20 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n          nCbal = nObal + Numbr( v21 );\r\n        ELSE;\r\n          nCbal = Numbr( v21 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n      Else;\r\n        CellPutS( v21, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 20 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 ) = 1 );\r\n      sElType = DType( sDim20, v21 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n          nCbal = nObal + Numbr( v22 );\r\n        ELSE;\r\n          nCbal = Numbr( v22 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n      Else;\r\n        CellPutS( v22, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 21 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 ) = 1 );\r\n      sElType = DType( sDim21, v22 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n          nCbal = nObal + Numbr( v23 );\r\n        ELSE;\r\n          nCbal = Numbr( v23 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n      Else;\r\n        CellPutS( v23, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 22 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 ) = 1 );\r\n      sElType = DType( sDim22, v23 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n          nCbal = nObal + Numbr( v24 );\r\n        ELSE;\r\n          nCbal = Numbr( v24 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n      Else;\r\n        CellPutS( v24, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 23 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24 ) = 1 );\r\n      sElType = DType( sDim23, v24 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n            v23, v24 );\r\n          nCbal = nObal + Numbr( v25 );\r\n        ELSE;\r\n          nCbal = Numbr( v25 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n          v23, v24 );\r\n      Else;\r\n        CellPutS( v25, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 24 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23, v24, v25 ) = 1 );\r\n      sElType = DType( sDim24, v25 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n            v23, v24, v25 );\r\n          nCbal = nObal + Numbr( v26 );\r\n        ELSE;\r\n          nCbal = Numbr( v26 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n          v23, v24, v25 );\r\n      Else;\r\n        CellPutS( v26, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n          v23, v24, v25 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 25 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n      v23, v24, v25, v26 ) = 1 );\r\n      sElType = DType( sDim25, v26 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n            v23, v24, v25, v26 );\r\n          nCbal = nObal + Numbr( v27 );\r\n        ELSE;\r\n          nCbal = Numbr( v27 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n          v23, v24, v25, v26 );\r\n      Else;\r\n        CellPutS( v27, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n          v23, v24, v25, v26 );\r\n      EndIf;\r\n    EndIf;\r\nElseIf( nDimensionCount = 26 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25, v26, v27 ) = 1 );\r\n      sElType = DType( sDim26, v27 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n            v23, v24, v25, v26, v27 );\r\n          nCbal = nObal + Numbr( v28 );\r\n        ELSE;\r\n          nCbal = Numbr( v28 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n        v23, v24, v25, v26, v27 );\r\n      Else;\r\n        CellPutS( v28, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,\r\n          v22, v23, v24, v25, v26, v27 );\r\n      EndIf;\r\n    EndIf;\r\nElseIf( nDimensionCount = 27 );\r\n    If( CellIsUpdateable( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25, v26, v27, v28 ) = 1 );\r\n      sElType = DType( sDim27, v28 );\r\n      If( sElType @<> 'S' );\r\n        IF(\r\n        pCumulate >= 1);\r\n          nObal = CellGetN( pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n            v23, v24, v25, v26, v27, v28 );\r\n          nCbal = nObal + Numbr( v29 );\r\n        ELSE;\r\n          nCbal = Numbr( v29 );\r\n        Endif;\r\n        CellPutN( nCbal, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n          v23, v24, v25, v26, v27, v28 );\r\n      Else;\r\n        CellPutS( v29, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,\r\n          v22, v23, v24, v25, v26, v27, v28 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n\r\n  EndIf;\r\nEndIf;\r\n\r\nIf( pDebug >= 1 );\r\n  ASCIIOutput( sDebugFile, pCube, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, \r\n    v24, v25, v26, v27, v28, v29);\r\nENDIF;\r\n\r\n\r\n## Increase Record count\r\nnRecordPostedCount = nRecordPostedCount + 1;\r\n### End Data ###", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v1"}, {"Position": 2, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v2"}, {"Position": 3, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v3"}, {"Position": 4, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v4"}, {"Position": 5, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v5"}, {"Position": 6, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v6"}, {"Position": 7, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v7"}, {"Position": 8, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v8"}, {"Position": 9, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v9"}, {"Position": 10, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v10"}, {"Position": 11, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v11"}, {"Position": 12, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v12"}, {"Position": 13, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v13"}, {"Position": 14, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v14"}, {"Position": 15, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v15"}, {"Position": 16, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v16"}, {"Position": 17, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v17"}, {"Position": 18, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v18"}, {"Position": 19, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v19"}, {"Position": 20, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v20"}, {"Position": 21, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v21"}, {"Position": 22, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v22"}, {"Position": 23, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v23"}, {"Position": 24, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v24"}, {"Position": 25, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v25"}, {"Position": 26, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v26"}, {"Position": 27, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v27"}, {"Position": 28, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v28"}, {"Position": 29, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v29"}, {"Position": 30, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "v30"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.Data.ImportFromFile", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This process will load a CSV text file to the specified cube\r\n\r\n# Notes:\r\n# - The assumed file format is as per standard CMA export\r\n# - v1 specIfies cube name, subsequent fields specify cube address ( individual element names )\r\n# - vN specIfies cell data value to load. With provision for files with header rows\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.Data.ImportFromFile';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\n\r\nnRecordProcessedCount = 0;\r\nnRecordPostedCount = 0;\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pSourceDir      : ' | pSourceDir );\r\n  AsciiOutput( sDebugFile, '            pSourceFile     : ' | pSourceFile );\r\n  AsciiOutput( sDebugFile, '            pCube           : ' | pCube );\r\n  AsciiOutput( sDebugFile, '            pDimension      : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pSourceElement  : ' | pSourceElement );\r\n  AsciiOutput( sDebugFile, '            pTargetElement  : ' | pTargetElement );\r\n  AsciiOutput( sDebugFile, '            pTitleRows      : ' | NumberToString( pTitleRows ) );\r\n  AsciiOutput( sDebugFile, '            pDelimiter      : ' | pDelimiter );\r\n  AsciiOutput( sDebugFile, '            pQuote          : ' | pQuote );\r\n  AsciiOutput( sDebugFile, '            pCumulate       : ' | NumberToString( pCumulate) );\r\n  AsciiOutput( sDebugFile, '            pDebug          : ' | NumberToString( pDebug) );\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\n\r\n# Validate source directory\r\nIf( \r\nSubSt( pSourceDir, Long( pSourceDir ) - 1, 1 ) @= '\\' );\r\n  pSourceDir = SubSt( pSourceDir, 1, Long( pSourceDir ) - 1 );\r\nEndIf;\r\nIf( \r\nFileExists( pSourceDir ) = 0 );\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Invalid source directory specified: folder does not exist.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n# Validate source file\r\nIf( \r\nTrim( pSourceFile ) @= '' );\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Invalid source file specified: file name is blank.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\nsFile = pSourceDir | '\\' | pSourceFile;\r\nIf( FileExists( sFile ) = 0 );\r\n  If( pDebug >= 1 );\r\n  sMessage = 'Invalid source file specified: file does not exist in directory:' | sFile;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n## Validate cube\r\nIf( CubeExists( pCube ) = 0 );\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Invalid target cube specified: ' | pCube;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n## Validate Dimension\r\npDimension = TRIM( pDimension);\r\n\r\nIf(\r\npDimension @<> '');\r\n  IF(\r\n  DimensionExists( pDimension ) = 0 );\r\n    If( pDebug >= 1 );\r\n      sMessage = 'Invalid dimension specified: ' | pDimension;\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ProcessQuit;\r\n  EndIf;\r\n\r\n  # Validate Source Element\r\n  If(\r\n  pSourceElement @= '' );\r\n      If( pDebug >= 1 );\r\n        sMessage = 'Error: The Source Element parameter is blank.';\r\n        AsciiOutput( sDebugFile, sMessage );\r\n      EndIf;\r\n      ProcessQuit;\r\n    EndIf;\r\n\r\n  If(\r\n  DIMIX( pDimension, pSourceElement ) = 0 );\r\n    sMessage = 'Invalid source element, ' | pSourceElement | ' specified for ' | pDimension | ' dimension.';\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ProcessQuit;\r\n  EndIf;\r\n  sSourceElement = DimensionElementPrincipalName( pDimension, pSourceElement);\r\n\r\n  # Validate Target Element\r\n  If(\r\n  pTargetElement @= '' );\r\n    If( pDebug >= 1 );\r\n      sMessage = 'Error: The Target Element parameter is blank.';\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ProcessQuit;\r\n  EndIf;\r\n\r\n\r\n  If(\r\n  DIMIX( pDimension, pTargetElement ) = 0 );\r\n    sMessage = 'Invalid target element, ' | pTargetElement | ' specified for ' | pDimension | ' dimension.';\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ProcessQuit;\r\n  EndIf;\r\n\r\nENDIF;\r\n\r\n\r\n## Validate delimiter\r\nIf( \r\npDelimiter @= '' );\r\n  pDelimiter = ',';\r\nEndIf;\r\nIf( Long( pDelimiter ) > 1 );\r\n   sMessage = 'Invalid delimiter specified: ' | pDelimiter | ' field delimiter must be single character.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n## Validate quote character\r\nIf( pQuote @= '' );\r\n  pQuote = '\"';\r\nEndIf;\r\nIf( \r\nLong( pQuote ) > 1 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid string qualIfier: ' | pQuote | ' quote character must be single character.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### Determine number of dims in target cube ###\r\nnCount = 1;\r\nnDimensionIndex = 0;\r\nWhile( \r\nTabDim( pCube, nCount ) @<> '' );\r\n  sDimension = TabDim( pCube, nCount );\r\n  If( sDimension @= pDimension );\r\n    nDimensionIndex = nCount;\r\n  EndIf;\r\n  nCount = nCount + 1;\r\nEnd;\r\nnDimensionCount = nCount - 1;\r\n\r\n## Validate the dimension is part of the cube.\r\nIF( \r\npDimension @= '');\r\n  ## CONTINUE;\r\nELSE;\r\n  If( \r\n  nDimensionIndex = 0 );\r\n    nErrors = 1;\r\n    If( pDebug >= 1 );\r\n      sMessage = 'Specified dimension: ' | pDimension | ' is not a component of the cube: ' | pCube;\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    ProcessQuit;\r\n  ELSE;\r\n    If( pDebug >= 1 );\r\n      sMessage = 'The ' | pCube | ' has ' | NumberToString( nDimensionCount) | ' dimensions.';\r\n      AsciiOutput( sDebugFile, sMessage );\r\n      sMessage = 'Specified dimension: ' | pDimension |\r\n        ', is dimension index: ' | NumberToString( nDimensionIndex ) |\r\n        ', the target cube: ' | pCube;\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n  EndIf;\r\nENDIF;\r\n\r\nIf( nDimensionCount > 27 );\r\n  nErrors = 1;\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Cube has too many dimensions: ' | pCube | ' max 27 dimensions.';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n\r\n### Determine dimensions in target cube, we need to know this to test cell type before loading ###\r\nsDim1 = TabDim( pCube, 1 );\r\nsDim2 = TabDim( pCube, 2 );\r\nsDim3 = TabDim( pCube, 3 );\r\nsDim4 = TabDim( pCube, 4 );\r\nsDim5 = TabDim( pCube, 5 );\r\nsDim6 = TabDim( pCube, 6 );\r\nsDim7 = TabDim( pCube, 7 );\r\nsDim8 = TabDim( pCube, 8 );\r\nsDim9 = TabDim( pCube, 9 );\r\nsDim10 = TabDim( pCube, 10 );\r\nsDim11 = TabDim( pCube, 11 );\r\nsDim12 = TabDim( pCube, 12 );\r\nsDim13 = TabDim( pCube, 13 );\r\nsDim14 = TabDim( pCube, 14 );\r\nsDim15 = TabDim( pCube, 15 );\r\nsDim16 = TabDim( pCube, 16 );\r\nsDim17 = TabDim( pCube, 17 );\r\nsDim18 = TabDim( pCube, 18 );\r\nsDim19 = TabDim( pCube, 19 );\r\nsDim20 = TabDim( pCube, 20 );\r\nsDim21 = TabDim( pCube, 21 );\r\nsDim22 = TabDim( pCube, 22 );\r\nsDim23 = TabDim( pCube, 23 );\r\nsDim24 = TabDim( pCube, 24 );\r\nsDim25 = TabDim( pCube, 25 );\r\nsDim26 = TabDim( pCube, 26 );\r\nsDim27 = TabDim( pCube, 27 );\r\n\r\n### Assign Datasource ###\r\n\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceNameForServer = sFile;\r\nDatasourceNameForClient = sFile;\r\nDatasourceASCIIHeaderRecords = pTitleRows;\r\nDatasourceASCIIDelimiter = pDelimiter;\r\nDatasourceASCIIQuoteCharacter = pQuote;\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | '_Data.debug';\r\nENDIF;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"asciiQuoteCharacter": "\"", "asciiDelimiterChar": ",", "dataSourceNameForServer": "C:\\TM1\\Bedrock\\Data\\Bedrock.Z.Cube.Placeholder.csv", "dataSourceNameForClient": "C:\\TM1\\Bedrock\\Data\\Bedrock.Z.Cube.Placeholder.csv", "asciiHeaderRecords": 2, "asciiThousandSeparator": ",", "asciiDelimiterType": "Character", "Type": "ASCII", "asciiDecimalSeparator": "."}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile,'Record Processed: ' | NumberToString( nRecordProcessedCount ) );\r\n  AsciiOutput( sDebugFile,'Record Load: ' | NumberToString( nRecordPostedCount ) );\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f"]}