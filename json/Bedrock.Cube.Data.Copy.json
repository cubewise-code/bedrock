{"Parameters": [{"Prompt": "Cube", "Type": "String", "Value": "", "Name": "pCube"}, {"Prompt": "Temporary view name for source", "Type": "String", "Value": "", "Name": "pViewSource"}, {"Prompt": "Temporary view name for target", "Type": "String", "Value": "", "Name": "pViewTarget"}, {"Prompt": "Dimension to Copy Data", "Type": "String", "Value": "", "Name": "pDimension"}, {"Prompt": "Source Element", "Type": "String", "Value": "", "Name": "pSourceElement"}, {"Prompt": "Target Element", "Type": "String", "Value": "", "Name": "pTargetElement"}, {"Prompt": "Skip Rule Values? (1=Skip)", "Type": "Numeric", "Value": 1, "Name": "pSkipRules"}, {"Prompt": "Zero out Target Element PRIOR to Copy? (Boolean 1=True)", "Type": "Numeric", "Value": 1, "Name": "pZeroTarget"}, {"Prompt": "Zero out Source Element AFTER Copy? (Boolean 1=True)", "Type": "Numeric", "Value": 0, "Name": "pZeroSource"}, {"Prompt": "Delete temporary view and Subset ( 0 = Retain View and Subsets 1 = Delete View and Subsets 2 = Delete View only )", "Type": "Numeric", "Value": 1, "Name": "pDestroyTempObj"}, {"Prompt": "Debug Mode", "Type": "Numeric", "Value": 0, "Name": "pDebug"}], "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Check for error in prolog ###\r\n\r\nIf( nErrors > 0 );\r\n  ProcessBreak;\r\nEndIf;\r\n\r\n### Validate the souce dimension ###\r\nIF(\r\nv1  @= pSourceElement %\r\nv2  @= pSourceElement %\r\nv3  @= pSourceElement %\r\nv4  @= pSourceElement %\r\nv5  @= pSourceElement %\r\nv6  @= pSourceElement %\r\nv7  @= pSourceElement %\r\nv8  @= pSourceElement %\r\nv9  @= pSourceElement %\r\nv10 @= pSourceElement %\r\nv11 @= pSourceElement %\r\nv12 @= pSourceElement %\r\nv13 @= pSourceElement %\r\nv14 @= pSourceElement %\r\nv15 @= pSourceElement %\r\nv16 @= pSourceElement %\r\nv17 @= pSourceElement %\r\nv18 @= pSourceElement %\r\nv19 @= pSourceElement %\r\nv20 @= pSourceElement %\r\nv21 @= pSourceElement %\r\nv22 @= pSourceElement %\r\nv23 @= pSourceElement %\r\nv24 @= pSourceElement %\r\nv25 @= pSourceElement %\r\nv26 @= pSourceElement %\r\nv27 @= pSourceElement %\r\nv28 @= pSourceElement );\r\n  ## Continue;\r\nELSE;\r\n  ITEMSKIP;\r\nENDIF;\r\n\r\n### Determine target dimension Substitution ###\r\nIf( nDimensionIndex = 1 );\r\n  v1 = pTargetElement;\r\nElseIf( nDimensionIndex = 2 );\r\n  v2 = pTargetElement;\r\nElseIf( nDimensionIndex = 3 );\r\n  v3 = pTargetElement;\r\nElseIf( nDimensionIndex = 4 );\r\n  v4 = pTargetElement;\r\nElseIf( nDimensionIndex = 5 );\r\n  v5 = pTargetElement;\r\nElseIf( nDimensionIndex = 6 );\r\n  v6 = pTargetElement;\r\nElseIf( nDimensionIndex = 7 );\r\n  v7 = pTargetElement;\r\nElseIf( nDimensionIndex = 8 );\r\n  v8 = pTargetElement;\r\nElseIf( nDimensionIndex = 9 );\r\n  v9 = pTargetElement;\r\nElseIf( nDimensionIndex = 10 );\r\n  v10 = pTargetElement;\r\nElseIf( nDimensionIndex = 11 );\r\n  v11 = pTargetElement;\r\nElseIf( nDimensionIndex = 12 );\r\n  v12 = pTargetElement;\r\nElseIf( nDimensionIndex = 13 );\r\n  v13 = pTargetElement;\r\nElseIf( nDimensionIndex = 14 );\r\n  v14 = pTargetElement;\r\nElseIf( nDimensionIndex = 15 );\r\n  v15 = pTargetElement;\r\nElseIf( nDimensionIndex = 16 );\r\n  v16 = pTargetElement;\r\nElseIf( nDimensionIndex = 17 );\r\n  v17 = pTargetElement;\r\nElseIf( nDimensionIndex = 18 );\r\n  v18 = pTargetElement;\r\nElseIf( nDimensionIndex = 19 );\r\n  v19 = pTargetElement;\r\nElseIf( nDimensionIndex = 20 );\r\n  v20 = pTargetElement;\r\nElseIf( nDimensionIndex = 21 );\r\n  v21 = pTargetElement;\r\nElseIf( nDimensionIndex = 22 );\r\n  v22 = pTargetElement;\r\nElseIf( nDimensionIndex = 23 );\r\n  v23 = pTargetElement;\r\nElseIf( nDimensionIndex = 24 );\r\n  v24 = pTargetElement;\r\nElseIf( nDimensionIndex = 25 );\r\n  v25 = pTargetElement;\r\nElseIf( nDimensionIndex = 26 );\r\n  v26 = pTargetElement;\r\nElseIf( nDimensionIndex = 27 );\r\n  v27 = pTargetElement;\r\nEndIf;\r\n\r\n\r\n### Write data from source version to target version ###\r\n\r\n# Selects the correct CellPut formula depending upon the number of dimensions in the cube\r\n# and whether the value is numeric or string ( max 27 dims catered for in this code )\r\n# value type determined by element type of last dimension in cube\r\n# could have used Value_is_String = 1 and NValue/SValue but this works just as well\r\n\r\nIf( pDebug <= 1 );\r\n  If( \r\n  nDimensionCount = 2 );\r\n    If( CellIsUpdateable( pCube, v1, v2 ) = 1 );\r\n      sElType = DType( sDim2, v2 );\r\n      IF( sElType @= 'AS' );\r\n        ATTRPUTS( v3, sDim1, v1, v2 );\r\n      ElseIf( sElType @= 'AA' & nAttrCubeFlag = 1 );\r\n        ITEMSKIP;\r\n      ElseIf( sElType @= 'AA' & nAttrCubeFlag = 0 );\r\n        ATTRPUTS( v3, sDim1, v1, v2 );\r\n      ELSEIF( sElType @= 'AN' );\r\n        ATTRPUTN( Numbr( v3), sDim1, v1, v2 );\r\n      ElseIf( sElType @= 'S' );\r\n        CellPutS( v3, pCube, v1, v2 );\r\n      Else;\r\n         CellPutN( Numbr( v3 ), pCube, v1, v2 );\r\n      ENDIF;\r\n    ENDIF;\r\n  \r\n  ElseIf( \r\n  nDimensionCount = 3 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3 ) = 1 );\r\n      sElType = DType( sDim3, v3 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v4 ), pCube, v1, v2, v3 );\r\n      Else;\r\n        CellPutS( v4, pCube, v1, v2, v3 );\r\n      EndIf;\r\n    EndIf;\r\n  ElseIf( nDimensionCount = 4 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4 ) = 1 );\r\n      sElType = DType( sDim4, v4 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v5 ), pCube, v1, v2, v3, v4 );\r\n      Else;\r\n        CellPutS( v5, pCube, v1, v2, v3, v4 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 5 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5 ) = 1 );\r\n      sElType = DType( sDim5, v5 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v6 ), pCube, v1, v2, v3, v4, v5 );\r\n      Else;\r\n        CellPutS( v6, pCube, v1, v2, v3, v4, v5 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 6 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6 ) = 1 );\r\n      sElType = DType( sDim6, v6 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v7 ), pCube, v1, v2, v3, v4, v5, v6 );\r\n      Else;\r\n        CellPutS( v7, pCube, v1, v2, v3, v4, v5, v6 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 7 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7 ) = 1 );\r\n      sElType = DType( sDim7, v7 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v8 ), pCube, v1, v2, v3, v4, v5, v6, v7 );\r\n      Else;\r\n        CellPutS( v8, pCube, v1, v2, v3, v4, v5, v6, v7 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 8 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8 ) = 1 );\r\n      sElType = DType( sDim8, v8 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v9 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8 );\r\n      Else;\r\n        CellPutS( v9, pCube, v1, v2, v3, v4, v5, v6, v7, v8 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 9 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 ) = 1 );\r\n      sElType = DType( sDim9, v9 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v10 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n      Else;\r\n        CellPutS( v10, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 10 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 ) = 1 );\r\n      sElType = DType( sDim10, v10 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v11 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n      Else;\r\n        CellPutS( v11, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 11 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 ) = 1 );\r\n      sElType = DType( sDim11, v11 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v12 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n      Else;\r\n        CellPutS( v12, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 12 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 ) = 1 );\r\n      sElType = DType( sDim12, v12 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v13 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n      Else;\r\n        CellPutS( v13, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 13 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 ) = 1 );\r\n      sElType = DType( sDim13, v13 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v14 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n      Else;\r\n        CellPutS( v14, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 14 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 ) = 1 );\r\n      sElType = DType( sDim14, v14 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v15 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n      Else;\r\n        CellPutS( v15, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 15 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 ) = 1 );\r\n      sElType = DType( sDim15, v15 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v16 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n      Else;\r\n        CellPutS( v16, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 16 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 ) = 1 );\r\n      sElType = DType( sDim16, v16 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v17 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n      Else;\r\n        CellPutS( v17, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 17 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 ) = 1 );\r\n      sElType = DType( sDim17, v17 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v18 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n      Else;\r\n        CellPutS( v18, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 18 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 ) = 1 );\r\n      sElType = DType( sDim18, v18 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v19 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n      Else;\r\n        CellPutS( v19, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 19 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 ) = 1 );\r\n      sElType = DType( sDim19, v19 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v20 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n      Else;\r\n        CellPutS( v20, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 20 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 ) = 1 );\r\n      sElType = DType( sDim20, v20 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v21 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n      Else;\r\n        CellPutS( v21, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 21 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v18, v20, v21 ) = 1 );\r\n      sElType = DType( sDim21, v21 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v22 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n      Else;\r\n        CellPutS( v22, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 22 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 ) = 1 );\r\n      sElType = DType( sDim22, v22 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v23 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n      Else;\r\n        CellPutS( v23, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 23 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23 ) = 1 );\r\n      sElType = DType( sDim23, v23 );\r\n      If( sElType @<> 'S' );\r\n        CellPutN( Numbr( v24 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n         v23 );\r\n      Else;\r\n        CellPutS( v24, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 24 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24 ) = 1 );\r\n      sElType = DType( sDim24, v24 );\r\n      If( sElType @<> 'S' );\r\n         CellPutN( Numbr( v25 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n         v23, v24 );\r\n      Else;\r\n        CellPutS( v25, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n   ElseIf( \r\n  nDimensionCount = 25 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25 ) = 1 );\r\n      sElType = DType( sDim25, v25 );\r\n      If( sElType @<> 'S' );\r\n         CellPutN( Numbr( v26 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n         v23, v24, v25 );\r\n      Else;\r\n        CellPutS( v26, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,\r\n        v25 );\r\n      EndIf;\r\n    EndIf;\r\n  EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 26 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25, v26 ) = 1 );\r\n      sElType = DType( sDim26, v26 );\r\n      If( sElType @<> 'S' );\r\n         CellPutN( Numbr( v27 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n         v23, v24, v25, v26 );\r\n      Else;\r\n        CellPutS( v27, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,\r\n        v25, v26 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  ElseIf( \r\n  nDimensionCount = 27 );\r\n    If( CellIsUpdateable( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n    v23, v24, v25, v26 ) = 1 );\r\n      sElType = DType( sDim27, v27 );\r\n      If( sElType @<> 'S' );\r\n         CellPutN( Numbr( v28 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,\r\n         v23, v24, v25, v26, v27 );\r\n      Else;\r\n        CellPutS( v28, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,\r\n        v25, v26, v27 );\r\n      EndIf;\r\n    EndIf;\r\n\r\n  EndIf;\r\n\r\n\r\n\r\n\r\n### End Data ###", "Variables": [{"Position": 1, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V1"}, {"Position": 2, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V2"}, {"Position": 3, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V3"}, {"Position": 4, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V4"}, {"Position": 5, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V5"}, {"Position": 6, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V6"}, {"Position": 7, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V7"}, {"Position": 8, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V8"}, {"Position": 9, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V9"}, {"Position": 10, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V10"}, {"Position": 11, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V11"}, {"Position": 12, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V12"}, {"Position": 13, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V13"}, {"Position": 14, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V14"}, {"Position": 15, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V15"}, {"Position": 16, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V16"}, {"Position": 17, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V17"}, {"Position": 18, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V18"}, {"Position": 19, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V19"}, {"Position": 20, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V20"}, {"Position": 21, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V21"}, {"Position": 22, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V22"}, {"Position": 23, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V23"}, {"Position": 24, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V24"}, {"Position": 25, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V25"}, {"Position": 26, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V26"}, {"Position": 27, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V27"}, {"Position": 28, "EndByte": 0, "StartByte": 0, "Type": "String", "Name": "V28"}], "HasSecurityAccess": true, "UIData": "CubeAction=1511\fDataAction=1503\fCubeLogChanges=0\f", "Name": "Bedrock.Cube.Data.Copy", "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n# This TI is designed to copy all data in a given cube\r\n# from one element to another, typically this would be within a\r\n# version dimension but could equally well be used to copy data\r\n# from one product to another or one week to another or on monthly basis.\r\n\r\n# Note:\r\n# - As this TI has a view as a data source it requires the implicit variables NValue, SValue and Value_is_String\r\n# - To edit this TI without VIZIER either a temp cube with 24 dims is needed as the preview data source or set the data\r\n#   source to ASCII and manually edit the TI in notepad after saving to add back the required implicit view variables\r\n\r\n\r\n### Constants ###\r\n\r\ncProcess = 'Bedrock.Cube.Data.Copy';\r\ncTimeStamp = TimSt( Now, '\\Y\\m\\d\\h\\i\\s' );\r\nsRandomInt = NumberToString( INT( RAND( ) * 1000 ));\r\ncDebugFile = GetProcessErrorFileDirectory | cProcess | '.' | cTimeStamp | '.' | sRandomInt ;\r\ncDefaultView = 'Bedrock_' | sRandomInt ;\r\nnExistingSourceFlag = 0;\r\nnAttrCubeFlag = 0;\r\n\r\n### Initialise Debug ###\r\n\r\n### Set debug file name\r\nsDebugFile = cDebugFile | 'Prolog.debug';\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Log start time\r\n  AsciiOutput( sDebugFile, 'Process Started: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\n  # Log parameters\r\n  AsciiOutput( sDebugFile, 'Parameters: pCube          : ' | pCube );\r\n  AsciiOutput( sDebugFile, '            pViewSource    : ' | pViewSource );\r\n  AsciiOutput( sDebugFile, '            pViewTarget    : ' | pViewTarget );\r\n\r\n  AsciiOutput( sDebugFile, '            pDimension     : ' | pDimension );\r\n  AsciiOutput( sDebugFile, '            pSourceElement : ' | pSourceElement );\r\n  AsciiOutput( sDebugFile, '            pTargetElement : ' | pTargetElement );\r\n  AsciiOutput( sDebugFile, '            pSkipRules     : ' | NumberToString( pSkipRules ) );\r\n  AsciiOutput( sDebugFile, '            pZeroTarget    : ' | NumberToString( pZeroTarget ) );\r\n  AsciiOutput( sDebugFile, '            pZeroSource    : ' | NumberToString( pZeroSource ) );\r\n  AsciiOutput( sDebugFile, '            Temp View Name : ' | cDefaultView );\r\nEndIf;\r\n\r\n\r\n### Validate Parameters ###\r\nnErrors = 0;\r\n\r\n## If a valid cube has not been specified then terminate process\r\nIf( \r\nCubeExists( pCube ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source cube specified: ' | pCube;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## Validate the View parameter\r\nIf( \r\nTRIM(pViewSource) @<> '' & \r\nTRIM(pViewSource) @= TRIM(pViewTarget) );\r\n  nErrors = 1;\r\n  sMessage = 'Source and Target Views can not be the same: ' | pViewSource | ' ' | pViewTarget ;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## Validate the View parameter\r\nIf( \r\nTRIM( pViewSource) @= '' );\r\n  If( \r\n  pDebug >= 1 );\r\n    sMessage = 'Using default source view: ' | cDefaultView | 'S';\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  cViewSource = cDefaultView | 'S' ;\r\nElse ;\r\n  If(\r\n   pDebug >= 1 );\r\n    sMessage = 'Using source view: ' | pViewSource;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  cViewSource = pViewSource ;\r\n  nExistingSourceFlag = 1;\r\nEndIf;\r\n\r\n## Validate the View parameter\r\nIf( \r\nTRIM( pViewTarget ) @= '' );\r\n  If( \r\n  pDebug >= 1 );\r\n    sMessage = 'Using default target view: ' | cDefaultView| 'T' ;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  cViewTarget = cDefaultView | 'T' ;\r\nElse ;\r\n  If( pDebug >= 1 );\r\n    sMessage = 'Using target view: ' | pViewTarget;\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  cViewTarget = pViewTarget ;\r\nEndIf;\r\n\r\n## If a valid source dimension has not been specified then terminate process\r\nIf( \r\nDimensionExists( pDimension ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid dimension specified: ' | pDimension;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## If source and target elements are the same then terminate process.\r\nIF( \r\npSourceElement @= pTargetElement );\r\n  nErrors = 1;\r\n  sMessage = 'Source and target elements are the same: ' | pSourceElement;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## If a valid source dimension element has not been specified then terminate process\r\nIf( \r\nDimIx( pDimension, pSourceElement ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid source element specified: ' | pSourceElement;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## If a valid target dimension element has not been specified then terminate process\r\nIf( \r\nDimIx( pDimension, pTargetElement ) = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Invalid target element specified: ' | pTargetElement;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n\r\n## Determine number of dims in source cube.\r\n## check that specified dimension exists in cube.\r\nnDimensionCount = 0;\r\nsDimension = TabDim( pCube, nDimensionCount + 1 );\r\nnDimensionIndex = 0;\r\nWhile( sDimension @<> '' );\r\n  nDimensionCount = nDimensionCount + 1;\r\n  If( \r\n  sDimension @= pDimension );\r\n    nDimensionIndex = nDimensionCount;\r\n  EndIf;\r\n  sDimension = TabDim( pCube, nDimensionCount + 1 );\r\nEnd;\r\n\r\n## If specified dim does not exist in cube then terminate process\r\nIf( \r\nnDimensionIndex = 0 );\r\n  nErrors = 1;\r\n  sMessage = 'Specified dimension: ' | pDimension | ' is not a component of the cube: ' | pCube;\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n## If dimension count exceeds the current maximum then terminate process\r\nIf( \r\nnDimensionCount > 27 );\r\n  nErrors = 1;\r\n  sMessage = 'Cube has too many dimensions: ' | pCube | '. Max 27 dims catered for, TI must be altered to accommodate.';\r\n  If( pDebug >= 1 );\r\n    AsciiOutput( sDebugFile, sMessage );\r\n  EndIf;\r\n  DataSourceType = 'NULL';\r\n  ItemReject( sMessage );\r\nEndIf;\r\n\r\n### Dealing with the measure dimension. Check that the source and target element type are the same.\r\nIF(\r\nnDimensionIndex = nDimensionCount );\r\n  sSourceType = DTYPE( pDimension, pSourceElement);\r\n  sTargetType = DTYPE( pDimension, pTargetElement);\r\n  IF(\r\n  sSourceType @<> sTargetType );\r\n    nErrors = 1;\r\n    sMessage = 'The Source element: ' | pSourceElement | ', type: ' | sSourceType | \r\n      ', is not the same as the Target element: ' | pTargetElement | ' type: ' | sTargetType;\r\n    If( pDebug >= 1 );\r\n      AsciiOutput( sDebugFile, sMessage );\r\n    EndIf;\r\n    DataSourceType = 'NULL';\r\n    ItemReject( sMessage );\r\n  ENDIF;\r\nENDIF;\r\n\r\n### Debug ###\r\nIf( pDebug >= 1 );\r\n  AsciiOutput( sDebugFile, 'Dimension \"' | pDimension | '\" index: ' | NumberToString( nDimensionIndex ) );\r\n  AsciiOutput( sDebugFile, 'Number of dimensions in ' | pCube | ' cube: ' | NumberToString( nDimensionCount ) );\r\n  AsciiOutput( sDebugFile, 'Source element: ' | pSourceElement );\r\n  AsciiOutput( sDebugFile, 'Target element: ' | pTargetElement );\r\nEndIf;\r\n\r\n### Check for Attribute cube\r\nIF(\r\nSUBST( pCube, 1, 19 ) @= '}ElementAttributes_' &\r\nSUBST( pDimension, 1, 19 ) @<> '}ElementAttributes_' );\r\n  ## We are copying an attribute cube. We transposing in the natural dimension. \r\n  ## We need to avoid copying alias elements.\r\n  nAttrCubeFlag = 1;\r\nENDIF;\r\n\r\n### Determine dimensions in source cube ###\r\nsDim1 = TabDim( pCube, 1 );\r\nsDim2 = TabDim( pCube, 2 );\r\nsDim3 = TabDim( pCube, 3 );\r\nsDim4 = TabDim( pCube, 4 );\r\nsDim5 = TabDim( pCube, 5 );\r\nsDim6 = TabDim( pCube, 6 );\r\nsDim7 = TabDim( pCube, 7 );\r\nsDim8 = TabDim( pCube, 8 );\r\nsDim9 = TabDim( pCube, 9 );\r\nsDim10 = TabDim( pCube, 10 );\r\nsDim11 = TabDim( pCube, 11 );\r\nsDim12 = TabDim( pCube, 12 );\r\nsDim13 = TabDim( pCube, 13 );\r\nsDim14 = TabDim( pCube, 14 );\r\nsDim15 = TabDim( pCube, 15 );\r\nsDim16 = TabDim( pCube, 16 );\r\nsDim17 = TabDim( pCube, 17 );\r\nsDim18 = TabDim( pCube, 18 );\r\nsDim19 = TabDim( pCube, 19 );\r\nsDim20 = TabDim( pCube, 20 );\r\nsDim21 = TabDim( pCube, 21 );\r\nsDim22 = TabDim( pCube, 22 );\r\nsDim23 = TabDim( pCube, 23 );\r\nsDim24 = TabDim( pCube, 24 );\r\nsDim25 = TabDim( pCube, 25 );\r\nsDim26 = TabDim( pCube, 26 );\r\nsDim27 = TabDim( pCube, 27 );\r\n\r\n\r\nIf( pDebug <= 1 );\r\n\r\n### Zero Out target version ###\r\n\r\n  If( pZeroTarget = 1 );\r\n\r\n    cTempViewTo = cViewTarget;\r\n    cTempSubTo = cTempViewTo;\r\n\r\n    If( \r\n    ViewExists( pCube, cTempViewTo ) = 1 );\r\n      # It is highly unlikely that the view already exists as the view name contains\r\n      # a random number. However it is included in case two separate calls generate\r\n      # the same random number.\r\n      ViewDestroy( pCube, cTempViewTo );\r\n    EndIf;\r\n    ViewCreate( pCube, cTempViewTo );\r\n\r\n    If( SubsetExists( pDimension, cTempSubTo ) = 1 );\r\n      # It is highly unlikely that the subset already exists as the subset name contains\r\n      # a random number. However it is included in case two separate calls generate\r\n      # the same random number.\r\n      SubsetDeleteAllElements( pDimension, cTempSubTo );\r\n    Else;\r\n      SubsetCreate( pDimension, cTempSubTo );\r\n    EndIf;\r\n    SubsetElementInsert( pDimension, cTempSubTo, pTargetElement, 1 );\r\n\r\n    ViewSubsetAssign( pCube, cTempViewTo, pDimension, cTempSubTo );\r\n    ViewExtractSkipCalcsSet( pCube, cTempViewTo, 1 );\r\n    ViewExtractSkipRuleValuesSet( pCube, cTempViewTo, 1 );\r\n    ViewExtractSkipZeroesSet( pCube, cTempViewTo, 1 );\r\n\r\n    ViewZeroOut( pCube, cTempViewTo );\r\n\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n### Create Processing View for source version ###\r\ncTempViewFrom = cViewSource;\r\ncTempSubFrom = cTempViewFrom;\r\n\r\nIf( \r\nViewExists( pCube, cTempViewFrom ) = 1 );\r\n  ## Use the existing view as a data source.\r\nELSE;\r\n  ViewDestroy( pCube, cTempViewFrom );\r\n  ViewCreate( pCube, cTempViewFrom );\r\n\r\n  If( \r\n  SubsetExists( pDimension, cTempSubFrom ) = 1 );\r\n    SubsetDeleteAllElements( pDimension, cTempSubFrom );\r\n  Else;\r\n    SubsetCreate( pDimension, cTempSubFrom );\r\n  EndIf;\r\n  SubsetElementInsert( pDimension, cTempSubFrom, pSourceElement, 1 );\r\n  ViewSubsetAssign( pCube, cTempViewFrom, pDimension, cTempSubFrom );\r\nENDIF;\r\n\r\n# If skip rules not 0 or 1 then set to 1 (skip)\r\nIf( \r\npSkipRules <> 0 & pSkipRules <> 1 );\r\n  pSkipRules = 1;\r\nEndIf;\r\n\r\nViewExtractSkipCalcsSet( pCube, cTempViewFrom, 1 );\r\nViewExtractSkipRuleValuesSet( pCube, cTempViewFrom, pSkipRules );\r\nViewExtractSkipZeroesSet( pCube, cTempViewFrom, 1 );\r\n\r\n### Assign Datasource ###\r\n\r\nDataSourceType = 'VIEW';\r\nDatasourceNameForServer = pCube;\r\nDatasourceNameForClient = pCube;\r\nDatasourceCubeView = cTempViewFrom;\r\n\r\n\r\n### End Prolog ###", "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n", "DataSource": {"view": "Temp", "dataSourceNameForServer": "Bedrock Test", "dataSourceNameForClient": "Bedrock Test", "Type": "TM1CubeView"}, "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\n\r\n\r\n#####################################################################################\r\n##~~Copyright bedrocktm1.org 2011 www.bedrocktm1.org/how-to-licence.php Ver 3.0.2~~##\r\n#####################################################################################\r\n\r\n\r\n### Initialise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Set debug file name\r\n  sDebugFile = cDebugFile | 'Epilog.debug';\r\n\r\nEndIf;\r\n\r\n\r\nIF( \r\nnErrors = 0 & pDebug <= 1 );\r\n\r\n  ### Zero out source data ###\r\n\r\n  If( pZeroSource = 1 );\r\n    ViewZeroOut( pCube, cTempViewFrom );\r\n\r\n    IF( pDebug >= 1 );\r\n      sMsg = 'Zero out source data.';\r\n      AsciiOutput( sDebugFile, sMsg );\r\n    ENDIF;\r\n\r\n  EndIf;\r\n\r\nEndIf;\r\n\r\n### Destroy temporary views and susbsets ###\r\nIF( \r\npDestroyTempObj > 0 );\r\n\r\n  IF( pDebug >= 1 );\r\n    sMsg = 'Destroy temporary objects: Mode: ' | NumberToString ( pDestroyTempObj );\r\n    AsciiOutput( sDebugFile, sMsg );\r\n  ENDIF;\r\n\r\n  ## Destroy temporary source view.\r\n  IF(\r\n  nExistingSourceFlag = 0 );\r\n    nRet = ExecuteProcess('Bedrock.Cube.ViewAndSubsets.Delete',\r\n      'pCube', pCube,\r\n      'pView', cTempViewFrom,\r\n      'pSubset', cTempViewFrom,\r\n      'pMode', pDestroyTempObj,\r\n      'pDebug', pDebug);\r\n  ENDIF;\r\n\r\n  IF( pDebug >= 1 );\r\n    sMsg = 'Temporary objects destroyed: Source view and subsets. Process End State: ' | NumberToString ( nRet ) ;\r\n    AsciiOutput( sDebugFile, sMsg );\r\n  ENDIF;\r\n\r\n  IF(\r\n  pZeroTarget = 1 );\r\n  ## Destroy temporary target view.\r\n\r\n    nRet = ExecuteProcess('Bedrock.Cube.ViewAndSubsets.Delete',\r\n      'pCube', pCube,\r\n      'pView', cTempViewTo,\r\n      'pSubset', cTempSubTo ,\r\n      'pMode', pDestroyTempObj,\r\n      'pDebug', pDebug);\r\n\r\n      IF( pDebug <= 1 );\r\n        sMsg = 'Temporary objects destroyed: Target View. Process End State: ' | NumberToString ( nRet ) ;\r\n        AsciiOutput( sDebugFile, sMsg );\r\n      ENDIF;\r\n  ENDIF;\r\n\r\n\r\nENDIF;\r\n\r\n### Finalise Debug ###\r\n\r\nIf( pDebug >= 1 );\r\n\r\n  # Log errors\r\n  If( nErrors <> 0 );\r\n    AsciiOutput( sDebugFile, 'Errors Occurred' );\r\n  EndIf;\r\n\r\n  # Log finish time\r\n  AsciiOutput( sDebugFile, 'Process Finished: ' | TimSt( Now, '\\d-\\m-\\Y \\h:\\i:\\s' ) );\r\n\r\nEndIf;\r\n\r\n\r\n### If errors occurred terminate process with a major error status ###\r\n\r\nIf( nErrors <> 0 );\r\n  ProcessQuit;\r\nEndIf;\r\n\r\n\r\n### End Epilog ###", "VariablesUIData": ["VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f", "VarType=32\fColType=827\f"]}